<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴小龙同學</title>
  <subtitle>党要我帅，我不得不帅！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuxiaolong.me/"/>
  <updated>2016-09-12T15:19:30.798Z</updated>
  <id>http://wuxiaolong.me/</id>
  
  <author>
    <name>吴小龙同學</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微言-源码售卖</title>
    <link href="http://wuxiaolong.me/2016/09/12/weiyanChild/"/>
    <id>http://wuxiaolong.me/2016/09/12/weiyanChild/</id>
    <published>2016-09-12T14:20:43.000Z</published>
    <updated>2016-09-12T15:19:30.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>资本寒冬，导致我已经两个月没发工资了，买个尿不湿都得咬牙考虑下，为了现在这个宝宝，只能卖掉微言这个“孩子”了。</p>
<p>微言算我第一个个人App，初衷是想通过这个App达到练手，并熟悉Android项目的创建到发布上线的整个流程，明显这个目标达到了。实在抱歉，很多人问我微言源码在哪里能看，因为我一直还在维护这个项目，因此未开源出来，我的github另外有个开源项目<a href="https://github.com/WuXiaolong/WeWin" target="_blank" rel="external">WeWin</a>，也是一个不错的练手项目。</p>
<p>微言从开始无言知晓到精品系列APP，我花了很多精力和时间，他就像我的孩子一样，伴他成长起来的！</p>
<a id="more"></a>
<h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/weiyan1.gif" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/weiyan2.gif" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/weiyan3.gif" alt=""></p>
<h1 id="好评如潮"><a href="#好评如潮" class="headerlink" title="好评如潮"></a>好评如潮</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/comment.jpg" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rank3.png" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rank2.jpg" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rank1.png" alt=""></p>
<h1 id="二维码下载"><a href="#二维码下载" class="headerlink" title="二维码下载"></a>二维码下载</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/weiyanAppDownload.png" alt=""></p>
<h1 id="我的收获"><a href="#我的收获" class="headerlink" title="我的收获"></a>我的收获</h1><p>1、广告费<br>总共赚了一两万广告费，13年年底开始搞，从一个月几十块，到最好一个月四千多。<br>2、Photoshop<br>没有美工，只能自己学着做一些简单的图片<br>3、产品意识<br>最重要一点，至于做成什么样子的应用，一开始根本不知道，更不知道“产品”，主观意识做一款励志的，后来认知到产品概念，想把微言做的更好，而不是纯粹地练手，其实其中好多功能不是我凭空想出来的，是用户反馈的。</p>
<h1 id="源码售卖"><a href="#源码售卖" class="headerlink" title="源码售卖"></a>源码售卖</h1><p>我还从来感受觉得生活多么艰辛，即使刚刚毕业工资才1.5K，我也觉得生活挺好，但如今不一样，不是我一个人吃好就好就行了，口袋里没有一点票子，这点让我很焦虑。如果您对微言有兴趣，欢迎私聊我，我的QQ1413129987，另外一个作品【<a href="http://app.mi.com/details?id=com.android.xiaomolongstudio.danhuaer" target="_blank" rel="external">今日情感</a>】也售卖，效果预览：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/todayEmotionAppScreenshots.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;资本寒冬，导致我已经两个月没发工资了，买个尿不湿都得咬牙考虑下，为了现在这个宝宝，只能卖掉微言这个“孩子”了。&lt;/p&gt;
&lt;p&gt;微言算我第一个个人App，初衷是想通过这个App达到练手，并熟悉Android项目的创建到发布上线的整个流程，明显这个目标达到了。实在抱歉，很多人问我微言源码在哪里能看，因为我一直还在维护这个项目，因此未开源出来，我的github另外有个开源项目&lt;a href=&quot;https://github.com/WuXiaolong/WeWin&quot;&gt;WeWin&lt;/a&gt;，也是一个不错的练手项目。&lt;/p&gt;
&lt;p&gt;微言从开始无言知晓到精品系列APP，我花了很多精力和时间，他就像我的孩子一样，伴他成长起来的！&lt;/p&gt;
    
    </summary>
    
      <category term="App" scheme="http://wuxiaolong.me/categories/App/"/>
    
    
      <category term="weiyan" scheme="http://wuxiaolong.me/tags/weiyan/"/>
    
  </entry>
  
  <entry>
    <title>一套完整的Android通用框架</title>
    <link href="http://wuxiaolong.me/2016/09/07/MyAndroidLibrary/"/>
    <id>http://wuxiaolong.me/2016/09/07/MyAndroidLibrary/</id>
    <published>2016-09-07T13:01:10.000Z</published>
    <updated>2016-09-08T12:21:19.886Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>现在做Android开发，已经是大好时机，网上有很多成熟的框架，我们应充分利用好这些，所谓前人种树后人好乘凉，很多时候压根不需要了解太多原理，只需站在巨人的丁丁上即可，当然您说您能力强，非要重复造轮子，无可厚非。</p>
</blockquote>
<h1 id="MVP模式"><a href="#MVP模式" class="headerlink" title="MVP模式"></a>MVP模式</h1><a id="more"></a>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/mvp.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Android MVP Sample，MVP+Retrofit+RxJava实践小结</p>
<h3 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/WuXiaolong/AndroidMVPSample" target="_blank" rel="external">https://github.com/WuXiaolong/AndroidMVPSample</a></p>
<h3 id="相关博客"><a href="#相关博客" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="http://wuxiaolong.me/2016/06/12/mvpRetrofitRxjava/">Android MVP+Retrofit+RxJava实践小结</a><br><a href="http://wuxiaolong.me/2015/09/23/AndroidMVPSample/">Android MVP 实例</a></p>
<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="butterknife"><a href="#butterknife" class="headerlink" title="butterknife"></a>butterknife</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/butterknife.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Bind Android views and callbacks to fields and methods 将Android视图和回调方法绑定到字段和方法上</p>
<h3 id="github地址-1"><a href="#github地址-1" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a></p>
<h3 id="相关博客-1"><a href="#相关博客-1" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">butterknife官网</a></p>
<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/retrofit2.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>Type-safe HTTP client for Android and Java by Square 类型安全的Http客户端</p>
<h3 id="github地址-2"><a href="#github地址-2" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a></p>
<h3 id="相关博客-2"><a href="#相关博客-2" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="http://wuxiaolong.me/2016/06/18/retrofits/">Android Retrofit 2.0 使用-补充篇</a><br><a href="http://wuxiaolong.me/2016/01/15/retrofit/">Android Retrofit 2.0使用</a><br><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit官网</a></p>
<h1 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h1><h2 id="glide"><a href="#glide" class="headerlink" title="glide"></a>glide</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/glide_logo.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>An image loading and caching library for Android focused on smooth scrolling  一个图片加载和缓存的库</p>
<h3 id="github地址-3"><a href="#github地址-3" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/bumptech/glide" target="_blank" rel="external">https://github.com/bumptech/glide</a></p>
<h2 id="picasso"><a href="#picasso" class="headerlink" title="picasso"></a>picasso</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/glide.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>A powerful image downloading and caching library for Android 一个强大的图片下载与缓存的库</p>
<h3 id="github地址-4"><a href="#github地址-4" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/square/picasso" target="_blank" rel="external">https://github.com/square/picasso</a></p>
<h3 id="相关博客-3"><a href="#相关博客-3" class="headerlink" title="相关博客"></a>相关博客</h3><p><strong>Glide 系列预览</strong><br><a href="http://mrfu.me/2016/02/27/Glide_Getting_Started/" target="_blank" rel="external">开始！</a><br><a href="http://mrfu.me/2016/02/27/Glide_Advanced_Loading/" target="_blank" rel="external">加载进阶</a><br><a href="http://mrfu.me/2016/02/27/Glide_ListAdapter_(ListView,_GridView" target="_blank" rel="external">ListAdapter(ListView, GridView)</a>/)<br><a href="http://mrfu.me/2016/02/27/Glide_Placeholders_&amp;_Fade_Animations/" target="_blank" rel="external">占位符 和 渐现动画</a><br><a href="http://mrfu.me/2016/02/27/Glide_Image_Resizing_&amp;_Scaling/" target="_blank" rel="external">图片重设大小 和 缩放</a><br><a href="http://mrfu.me/2016/02/27/Glide_Displaying_Gifs_&amp;_Videos/" target="_blank" rel="external">显示 Gif 和 Video</a><br><a href="http://mrfu.me/2016/02/27/Glide_Caching_Basics/" target="_blank" rel="external">缓存基础</a><br><a href="http://mrfu.me/2016/02/27/Glide_Request_Priorities/" target="_blank" rel="external">请求优先级</a><br><a href="http://mrfu.me/2016/02/27/Glide_Thumbnails/" target="_blank" rel="external">缩略图</a><br><a href="http://mrfu.me/2016/02/27/Glide_Callbacks_SimpleTarget_and_ViewTarget_for_Custom_View_Classes/" target="_blank" rel="external">回调：SimpleTarget 和 ViewTarget 用于自定义视图类</a><br><a href="http://mrfu.me/2016/02/27/Glide_Loading_Images_into_Notifications_and_AppWidgets/" target="_blank" rel="external">加载图片到通知栏和应用小部件中</a><br><a href="http://mrfu.me/2016/02/28/Glide_Exceptions-_Debugging_and_Error_Handling/" target="_blank" rel="external">异常：调试和错误处理</a><br><a href="http://mrfu.me/2016/02/28/Glide_Custom_Transformations/" target="_blank" rel="external">自定义转换</a><br><a href="http://mrfu.me/2016/02/28/Glide_Custom_Transformations/" target="_blank" rel="external">用 animate() 自定义动画</a><br><a href="http://mrfu.me/2016/02/28/Glide_Integrating_Networking_Stacks/" target="_blank" rel="external">集成网络栈</a><br><a href="http://mrfu.me/2016/02/28/Glide_Customize_Glide_with_Modules/" target="_blank" rel="external">用 Module 自定义 Glide</a><br><a href="http://mrfu.me/2016/02/28/Glide_Module_Example_Accepting_Self-Signed_HTTPS_Certificates/" target="_blank" rel="external">Module 实例：接受自签名证书的 HTTPS</a><br><a href="http://mrfu.me/2016/02/28/Glide_Module_Example_Customize_Caching/" target="_blank" rel="external">Module 实例：自定义缓存</a><br><a href="http://mrfu.me/2016/02/28/Glide_Module_Example_Optimizing/" target="_blank" rel="external">Module 实例：用自定义尺寸优化加载的图片</a><br><a href="http://mrfu.me/2016/02/28/Glide_Dynamically_Use_Model_Loaders/" target="_blank" rel="external">动态使用 Model Loader</a><br><a href="http://mrfu.me/2016/02/28/Glide_How_to_Rotate_Images/" target="_blank" rel="external">如何旋转图像</a><br><a href="http://mrfu.me/2016/02/28/Glide_Series_Roundup/" target="_blank" rel="external">系列综述</a></p>
<p><strong>Picasso</strong><br><a href="http://wuxiaolong.me/2015/09/14/Picasso/">github之Picasso使用</a></p>
<h1 id="图片操作"><a href="#图片操作" class="headerlink" title="图片操作"></a>图片操作</h1><h2 id="PhotoView"><a href="#PhotoView" class="headerlink" title="PhotoView"></a>PhotoView</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/PhotoView.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>Implementation of ImageView for Android that supports zooming, by various touch gestures 图片缩放</p>
<h3 id="github地址-5"><a href="#github地址-5" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="external">https://github.com/chrisbanes/PhotoView</a></p>
<h3 id="相关博客-4"><a href="#相关博客-4" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="http://wuxiaolong.me/2015/09/14/PhotoView/">github之PhotoView使用</a></p>
<h2 id="uCrop"><a href="#uCrop" class="headerlink" title="uCrop"></a>uCrop</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/ucrop0.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><p>Image Cropping Library for Android 图片裁剪</p>
<h3 id="github地址-6"><a href="#github地址-6" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/Yalantis/uCrop" target="_blank" rel="external">https://github.com/Yalantis/uCrop</a></p>
<h3 id="相关博客-5"><a href="#相关博客-5" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="http://wuxiaolong.me/2016/06/20/uCrop/">uCrop使用及源码浅析</a></p>
<h2 id="CircleImageView"><a href="#CircleImageView" class="headerlink" title="CircleImageView"></a>CircleImageView</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/CircleImageView.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><p>A circular ImageView for Android 圆头像</p>
<h3 id="github地址-7"><a href="#github地址-7" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">https://github.com/hdodenhof/CircleImageView</a></p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/realm.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h3><p>Realm is a mobile database: a replacement for SQLite &amp; ORMs</p>
<h3 id="github地址-8"><a href="#github地址-8" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/realm/realm-java" target="_blank" rel="external">https://github.com/realm/realm-java</a></p>
<h3 id="相关博客-6"><a href="#相关博客-6" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="https://realm.io/cn/docs/java/latest/#getting-started" target="_blank" rel="external">Realm官网</a></p>
<h1 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h1><h2 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/rxjava.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h3><p>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM</p>
<h3 id="github地址-9"><a href="#github地址-9" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></p>
<h3 id="相关博客-7"><a href="#相关博客-7" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="http://wuxiaolong.me/2016/01/18/rxjava/">RxJava</a><br><a href="http://rxjava.yuxingxin.com/" target="_blank" rel="external">RxJava Essentials CN</a><br><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="external">ReactiveX文档中文翻译</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></p>
<h1 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h1><h2 id="RxBus"><a href="#RxBus" class="headerlink" title="RxBus"></a>RxBus</h2><h3 id="简介-10"><a href="#简介-10" class="headerlink" title="简介"></a>简介</h3><p>基于RxJava写的事件总线</p>
<h3 id="相关博客-8"><a href="#相关博客-8" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="http://wuxiaolong.me/2016/04/07/rxbus/">RxBus</a></p>
<h1 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h1><h2 id="PullLoadMoreRecyclerView"><a href="#PullLoadMoreRecyclerView" class="headerlink" title="PullLoadMoreRecyclerView"></a>PullLoadMoreRecyclerView</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/PullLoadMoreRecyclerView.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="简介-11"><a href="#简介-11" class="headerlink" title="简介"></a>简介</h3><p>实现RecyclerView下拉刷新和上拉加载更多以及RecyclerView线性、网格、瀑布流效果演示。适用于只需要简单地实现下拉刷新和上拉加载效果。</p>
<h3 id="github地址-10"><a href="#github地址-10" class="headerlink" title="github地址"></a>github地址</h3><p><a href="https://github.com/WuXiaolong/PullLoadMoreRecyclerView" target="_blank" rel="external">https://github.com/WuXiaolong/PullLoadMoreRecyclerView</a></p>
<h3 id="相关博客-9"><a href="#相关博客-9" class="headerlink" title="相关博客"></a>相关博客</h3><p><a href="https://github.com/WuXiaolong/PullLoadMoreRecyclerView/blob/master/README.md" target="_blank" rel="external">PullLoadMoreRecyclerView</a></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>知道了解以上开源框架，开发又何忧！我总结的可能还不够全，如果您觉得实际项目中还有必用到的库，欢迎留言哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;现在做Android开发，已经是大好时机，网上有很多成熟的框架，我们应充分利用好这些，所谓前人种树后人好乘凉，很多时候压根不需要了解太多原理，只需站在巨人的丁丁上即可，当然您说您能力强，非要重复造轮子，无可厚非。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;MVP模式&quot;&gt;&lt;a href=&quot;#MVP模式&quot; class=&quot;headerlink&quot; title=&quot;MVP模式&quot;&gt;&lt;/a&gt;MVP模式&lt;/h1&gt;
    
    </summary>
    
      <category term="Library" scheme="http://wuxiaolong.me/categories/Library/"/>
    
    
      <category term="Library" scheme="http://wuxiaolong.me/tags/Library/"/>
    
  </entry>
  
  <entry>
    <title>Android 画布Canvas</title>
    <link href="http://wuxiaolong.me/2016/08/27/Canvas/"/>
    <id>http://wuxiaolong.me/2016/08/27/Canvas/</id>
    <published>2016-08-27T08:28:30.000Z</published>
    <updated>2016-08-25T11:38:52.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>写完 <a href="http://wuxiaolong.github.io/2016/08/20/Paint/" target="_blank" rel="external">Android 画笔Paint</a>，自然少不了Canvas画布，本文延续上篇风格，一一来过Canvas API。</p>
</blockquote>
<h1 id="绘制方法"><a href="#绘制方法" class="headerlink" title="绘制方法"></a>绘制方法</h1><p>以drawXXX为主的绘制方法，api如下：<br><a id="more"></a><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas1.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas2.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas3.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas4.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="drawARGB"><a href="#drawARGB" class="headerlink" title="drawARGB"></a>drawARGB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawARGB (int a,int r,int g,int b)</div></pre></td></tr></table></figure>
<p>统一颜色绘制，四个参数取值范围0~255</p>
<h2 id="drawArc"><a href="#drawArc" class="headerlink" title="drawArc"></a>drawArc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void drawArc (RectF oval, </div><div class="line">                float startAngle, </div><div class="line">                float sweepAngle, </div><div class="line">                boolean useCenter, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>绘制弧面或弧线。对于绘制对应图形的填充面，还是图形的轮廓线，这在于画笔Paint中的setStyle。<br>oval：矩形；<br>startAngle：起点角度，0度的角度对应于0度的几何角（在手表3点钟）；<br>sweepAngle：顺时针扫过的角度；<br>useCenter：弧面或弧线；<br>paint：画笔</p>
<p><strong>弧面</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RectF rectF = new RectF(100f, 100f, 500f, 500f);</div><div class="line">canvas.drawArc(rectF, 0, 150, true, mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas5.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><strong>弧线</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RectF rectF = new RectF(100f, 100f, 500f, 500f);</div><div class="line">canvas.drawArc(rectF, 0, 150, false, mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas6.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="drawBitmap"><a href="#drawBitmap" class="headerlink" title="drawBitmap"></a>drawBitmap</h2><p>绘制使用指定的矩阵的位图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//方法1</div><div class="line">void drawBitmap (Bitmap bitmap, </div><div class="line">                float left, </div><div class="line">                float top, </div><div class="line">                Paint paint) </div><div class="line"></div><div class="line">//方法2               </div><div class="line">void drawBitmap (Bitmap bitmap, </div><div class="line">                Rect src, </div><div class="line">                Rect dst, </div><div class="line">                Paint paint)</div><div class="line">//方法3               </div><div class="line">void drawBitmap (Bitmap bitmap, </div><div class="line">                Matrix matrix, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure></p>
<p>例子代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mBitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.logo);</div><div class="line"></div><div class="line">canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line"></div><div class="line">//绘制Bitmap的一部分，并对其拉伸</div><div class="line">//srcRect绘制Bitmap的哪一部分</div><div class="line">Rect src = new Rect(0, 0, mBitmap.getWidth(), mBitmap.getHeight() / 3);</div><div class="line">//dstRecF绘制的Bitmap拉伸到哪里</div><div class="line">RectF dst = new RectF(0, mBitmap.getHeight(), canvas.getWidth(), mBitmap.getHeight() + 200);</div><div class="line">canvas.drawBitmap(mBitmap, src, dst, mPaint);</div><div class="line"></div><div class="line">Matrix matrix = new Matrix();</div><div class="line">matrix.postTranslate(0, mBitmap.getHeight() + 200);</div><div class="line">canvas.drawBitmap(mBitmap, matrix, mPaint);</div></pre></td></tr></table></figure></p>
<p>效果图从上至下，分别对应方法1-3<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas7.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="drawBitmapMesh"><a href="#drawBitmapMesh" class="headerlink" title="drawBitmapMesh"></a>drawBitmapMesh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">void drawBitmapMesh (Bitmap bitmap, </div><div class="line">                int meshWidth, </div><div class="line">                int meshHeight, </div><div class="line">                float[] verts, </div><div class="line">                int vertOffset, </div><div class="line">                int[] colors, </div><div class="line">                int colorOffset, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>绘制网格顶点被均匀地分布在该位图<br>bitmap：位图<br>meshWidth：横向上把该源位图划成成多少格<br>meshHeight：竖向上把该源位图划成成多少格<br>verts：长度为(meshWidth + 1) <em> (meshHeight + 1) </em> 2的数组，它记录了扭曲后的位图各顶点位置<br>vertOffset：控制verts数组中从第几个数组元素开始才对bitmap进行扭曲<br>colors：可以为null，指定在每个顶点，其值由对应的位图颜色相乘内插的颜色。如果不为空，必须有至少（meshWidth+ 1）*（meshHeight+ 1）+ colorOffset数组中的值。<br>colorOffset    int: Number of color elements to skip before drawing<br>paint：画笔，可以为null</p>
<p>效果参考博客 <a href="http://blog.csdn.net/u010947098/article/details/44731781" target="_blank" rel="external">Android Canvas的drawBitmapMesh实现扭曲图像</a></p>
<h2 id="drawCircle"><a href="#drawCircle" class="headerlink" title="drawCircle"></a>drawCircle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void drawCircle (float cx, </div><div class="line">                float cy, </div><div class="line">                float radius, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>绘制圆<br>cx，cy代表圆心的坐标<br>radius圆的半径<br>paint画笔<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawCircle(500f, 500f, 200, mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas8.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="drawColor"><a href="#drawColor" class="headerlink" title="drawColor"></a>drawColor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawColor (int color)</div></pre></td></tr></table></figure>
<p>设置画布颜色</p>
<h2 id="drawLine"><a href="#drawLine" class="headerlink" title="drawLine"></a>drawLine</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void drawLine (float startX, </div><div class="line">                float startY, </div><div class="line">                float stopX, </div><div class="line">                float stopY, </div><div class="line">                Paint paint)</div><div class="line">void drawLines (float[] pts, </div><div class="line">                Paint paint)                </div><div class="line">void drawLines (float[] pts, </div><div class="line">                int offset, </div><div class="line">                int count, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>画线<br>方法1<br>startX，startY起点坐标<br>stopX，stopY终点坐标<br>paint画笔</p>
<p>方法2<br>pts：绘制直线的端点数组，每条直线占用4个数据，即起终点坐标。<br>paint：绘制直线所使用的画笔。</p>
<p>方法2<br>pts：绘制直线的端点数组，每条直线占用4个数据，即起终点坐标。<br>offset：跳过的数据个数，取值为4的倍数。<br>count：实际参与绘制的数据个数。<br>paint：绘制直线所使用的画笔。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawLine(100f,100f,500f,500f,mPaint);</div></pre></td></tr></table></figure>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas9.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">float[] pts = &#123;100f, 100f, 400f, 400f,</div><div class="line">                400f, 400f, 250f, 560f,</div><div class="line">                250f, 560f, 400f, 800f,</div><div class="line">                400f, 800f, 280f, 880f&#125;;</div><div class="line">canvas.drawLines(pts, mPaint);</div></pre></td></tr></table></figure>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas10.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">float[] pts = &#123;100f, 100f, 400f, 400f,</div><div class="line">                400f, 400f, 250f, 560f,</div><div class="line">                250f, 560f, 400f, 800f,</div><div class="line">                400f, 800f, 280f, 880f&#125;;</div><div class="line">//有选择地绘制直线</div><div class="line">canvas.drawLines(pts, 4, 8, mPaint);</div></pre></td></tr></table></figure></p>
<p>跳过前4个数据，绘制后面8的数据，即绘制了第二第三个点：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas11.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="drawOval"><a href="#drawOval" class="headerlink" title="drawOval"></a>drawOval</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawOval (RectF oval,Paint paint)</div></pre></td></tr></table></figure>
<p>绘制椭圆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RectF rectF = new RectF(100f, 100f, 600f, 500f);</div><div class="line">//等同于圆的效果</div><div class="line">//RectF rectF = new RectF(100f, 100f, 500f, 500f);</div><div class="line">canvas.drawOval(rectF, mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas12.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="drawPath"><a href="#drawPath" class="headerlink" title="drawPath"></a>drawPath</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawPath (Path path,Paint paint)</div></pre></td></tr></table></figure>
<p>例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Path path = new Path();</div><div class="line">//向Path中加入Arc</div><div class="line">RectF arcRecF = new RectF(0, 0, 500, 500);</div><div class="line">path.addArc(arcRecF, 0, 135);</div><div class="line">canvas.drawPath(path, mPaint);</div></pre></td></tr></table></figure></p>
<p>更多Path（宝藏，可继续挖掘），详见博客<a href="http://ghui.me/post/2015/10/android-graphics-path/" target="_blank" rel="external">android绘图之Path总结</a></p>
<h2 id="drawPoint"><a href="#drawPoint" class="headerlink" title="drawPoint"></a>drawPoint</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void drawPoint (float x, </div><div class="line">                float y, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>绘制点，x，y分别是点坐标<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void drawPoints (float[] pts, </div><div class="line">                int offset, </div><div class="line">                int count, </div><div class="line">                Paint paint)</div><div class="line">void drawPoints (float[] pts, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure></p>
<p>drawPoints与drawLines类似</p>
<h2 id="drawRGB"><a href="#drawRGB" class="headerlink" title="drawRGB"></a>drawRGB</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void drawRGB (int r, </div><div class="line">                int g, </div><div class="line">                int b)</div></pre></td></tr></table></figure>
<p>RGB绘制画布颜色，取值也是0~255</p>
<h2 id="drawRect"><a href="#drawRect" class="headerlink" title="drawRect"></a>drawRect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void drawRect (float left, </div><div class="line">                float top, </div><div class="line">                float right, </div><div class="line">                float bottom, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>绘制矩形，前四个参数分别表示矩形的左，顶，右，低</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void drawRect (Rect r,Paint paint)</div><div class="line">void drawRect (RectF rect,Paint paint)</div></pre></td></tr></table></figure>
<p>Rect 和 RectF区别是Rect初始化 是int，RectF 是left</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawRect(100f,100f,500f,500f,mPaint);</div></pre></td></tr></table></figure>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas13.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""> </p>
<h2 id="drawRoundRect"><a href="#drawRoundRect" class="headerlink" title="drawRoundRect"></a>drawRoundRect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void drawRoundRect (RectF rect, </div><div class="line">                float rx, </div><div class="line">                float ry, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>绘制圆矩形<br>rx：圆角x方向的半径<br>ry：圆角y方向的半径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RectF rectF = new RectF(100f, 100f, 500f, 500f);</div><div class="line">canvas.drawRoundRect(rectF, 50, 150, mPaint);</div></pre></td></tr></table></figure>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas14.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""> </p>
<h2 id="drawText"><a href="#drawText" class="headerlink" title="drawText"></a>drawText</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">void drawText (CharSequence text, </div><div class="line">                int start, </div><div class="line">                int end, </div><div class="line">                float x, </div><div class="line">                float y, </div><div class="line">                Paint paint)</div><div class="line">void drawText (String text, </div><div class="line">                float x, </div><div class="line">                float y, </div><div class="line">                Paint paint)</div><div class="line">void drawText (String text, </div><div class="line">                int start, </div><div class="line">                int end, </div><div class="line">                float x, </div><div class="line">                float y, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>绘制文本<br>start：指的文本从哪个开始；end：文本结束的位置；x，y：文本起点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mPaint.setTextSize(50);</div><div class="line">String text = &quot;我的微信公众号：吴小龙同学&quot;;</div><div class="line">canvas.drawText(text, 2, text.length(), 100, 100, mPaint)</div><div class="line">canvas.drawText(&quot;我的微信公众号：吴小龙同学&quot;, 100, 400, mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas15.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""> </p>
<h2 id="drawTextOnPath"><a href="#drawTextOnPath" class="headerlink" title="drawTextOnPath"></a>drawTextOnPath</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void drawTextOnPath (String text, </div><div class="line">                Path path, </div><div class="line">                float hOffset, </div><div class="line">                float vOffset, </div><div class="line">                Paint paint)</div><div class="line">void drawTextOnPath (char[] text, </div><div class="line">                int index, </div><div class="line">                int count, </div><div class="line">                Path path, </div><div class="line">                float hOffset, </div><div class="line">                float vOffset, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>沿着Path绘制一段文字<br>hOffset  : 与路径起始点的水平偏移距离<br>vOffset  : 与路径中心的垂直偏移量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Path path = new Path();</div><div class="line">//Path.Direction.CW，沿外环；Path.Direction.CCW，沿内环</div><div class="line">path.addCircle(500, 500, 200, Path.Direction.CW);</div><div class="line">mPaint.setTextSize(50);</div><div class="line">// 绘制路径</div><div class="line">canvas.drawPath(path, mPaint);</div><div class="line">String text = &quot;我的微信公众号：吴小龙同学&quot;;</div><div class="line">canvas.drawTextOnPath(text, path, 0f, 0f, mPaint);</div></pre></td></tr></table></figure>
<p> <img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas16.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""> </p>
<h2 id="drawVertices"><a href="#drawVertices" class="headerlink" title="drawVertices"></a>drawVertices</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void drawVertices (Canvas.VertexMode mode, </div><div class="line">                int vertexCount, </div><div class="line">                float[] verts, </div><div class="line">                int vertOffset, </div><div class="line">                float[] texs, </div><div class="line">                int texOffset, </div><div class="line">                int[] colors, </div><div class="line">                int colorOffset, </div><div class="line">                short[] indices, </div><div class="line">                int indexOffset, </div><div class="line">                int indexCount, </div><div class="line">                Paint paint)</div></pre></td></tr></table></figure>
<p>绘制顶点数组</p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="裁剪方法"><a href="#裁剪方法" class="headerlink" title="裁剪方法"></a>裁剪方法</h1><p>以clipXXX为主的<br> <img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas17.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""> </p>
<h2 id="clipPath"><a href="#clipPath" class="headerlink" title="clipPath"></a>clipPath</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">boolean clipPath (Path path, </div><div class="line">                Region.Op op) </div><div class="line">boolean clipPath (Path path)</div></pre></td></tr></table></figure>
<p>裁剪路径<br>op：各种裁剪组合模式，有六个枚举常量，下有详解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Path path = new Path();</div><div class="line">RectF arcRecF = new RectF(0, 0, 500, 500);</div><div class="line">path.addArc(arcRecF, 0, 135);</div><div class="line">canvas.clipPath(path);</div><div class="line">canvas.drawColor(Color.RED);</div></pre></td></tr></table></figure></p>
<p> <img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas18.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br> 有图可知，画布已经是红区区域了。</p>
<h2 id="clipRect"><a href="#clipRect" class="headerlink" title="clipRect"></a>clipRect</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">boolean clipRect (float left, </div><div class="line">                float top, </div><div class="line">                float right, </div><div class="line">                float bottom, </div><div class="line">                Region.Op op)</div><div class="line">boolean clipRect (RectF rect)</div><div class="line">boolean clipRect (int left, </div><div class="line">                int top, </div><div class="line">                int right, </div><div class="line">                int bottom)</div><div class="line">boolean clipRect (RectF rect, </div><div class="line">                Region.Op op)</div><div class="line">boolean clipRect (Rect rect)</div></pre></td></tr></table></figure>
<p>裁剪矩形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">canvas.clipRect(100, 100, 400, 500);</div><div class="line">canvas.drawColor(Color.RED);</div></pre></td></tr></table></figure></p>
<p> <img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas19.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>  有图可知，画布已经是红区矩形区域了。</p>
<p><strong>Region.Op</strong><br>各种裁剪组合模式，有六个枚举常量，如下图，红色即组合裁剪的区域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 填充颜色</div><div class="line">canvas.drawColor(Color.BLUE);</div><div class="line">canvas.save();</div><div class="line">canvas.clipRect(100, 100, 400, 500);</div><div class="line">canvas.clipRect(200, 200, 600, 600, Region.Op.DIFFERENCE);</div><div class="line">canvas.drawColor(Color.RED);</div><div class="line">canvas.restore();</div><div class="line">// 绘制和裁剪一样的矩形便于观察</div><div class="line">canvas.drawRect(100, 100, 400, 500, mPaint);</div><div class="line">canvas.drawRect(200, 200, 600, 600, mPaint);</div></pre></td></tr></table></figure></p>
<p>Region.Op     DIFFERENCE<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas20.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>Region.Op     INTERSECT<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas21.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>Region.Op     REPLACE<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas22.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>Region.Op     REVERSE_DIFFERENCE<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas23.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>Region.Op     UNION<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas24.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>Region.Op     XOR<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas25.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="">  </p>
<h1 id="变换方法"><a href="#变换方法" class="headerlink" title="变换方法"></a>变换方法</h1><p>rotate，scale、skew、translate<br>旋转、缩放、错切、平移</p>
<h2 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void rotate (float degrees)</div><div class="line">void rotate (float degrees, </div><div class="line">                float px, </div><div class="line">                float py)</div></pre></td></tr></table></figure>
<p>画布的旋转<br>degrees：顺时针旋转的角度<br>px和py 基准点平移，默认起点（0,0）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">canvas.drawColor(Color.BLUE);</div><div class="line">canvas.drawRect(new Rect(0, 0, 400, 400), mPaint);</div><div class="line">mPaint.setColor(Color.YELLOW);</div><div class="line">canvas.rotate(45);</div><div class="line">canvas.drawRect(new Rect(0, 0, 400, 400), mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas28.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt="">  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h2 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//方法1</div><div class="line">void scale (float sx, float sy)</div></pre></td></tr></table></figure>
<p>画布的缩放<br>sx、sy是x、y方向上缩放的倍数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">canvas.drawColor(Color.BLUE);</div><div class="line">mPaint.setColor(Color.GREEN);</div><div class="line">canvas.drawRect(0, 0, 400, 500, mPaint);</div><div class="line">canvas.scale(0.5f, 0.5f);</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawRect(0, 0, 400, 500, mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas26.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br> 红色矩形比绿色缩小的一半<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//方法2</div><div class="line">void scale (float sx, </div><div class="line">                float sy, </div><div class="line">                float px, </div><div class="line">                float py)</div></pre></td></tr></table></figure></p>
<p>px和py 分别为缩放的基准点，看scale源码可知基准点平移了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public final void scale(float sx, float sy, float px, float py) &#123;</div><div class="line">    translate(px, py);</div><div class="line">    scale(sx, sy);</div><div class="line">    translate(-px, -py);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">canvas.drawColor(Color.BLUE);</div><div class="line">mPaint.setColor(Color.GREEN);</div><div class="line">canvas.drawRect(0, 0, 400, 500, mPaint);</div><div class="line">// 保存画布状态</div><div class="line">canvas.save();</div><div class="line">canvas.scale(0.5f, 0.5f);</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawRect(0, 0, 400, 500, mPaint);</div><div class="line">canvas.restore();</div><div class="line">canvas.scale(0.5f, 0.5f, 200, 200);</div><div class="line">mPaint.setColor(Color.WHITE);</div><div class="line">canvas.drawRect(0, 0, 400, 500, mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas27.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>白色就是平移后的效果</p>
<h2 id="skew"><a href="#skew" class="headerlink" title="skew"></a>skew</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void skew (float sx,float sy)</div></pre></td></tr></table></figure>
<p>画布的错切<br>float sx:将画布在x方向上倾斜相应的角度，sx为倾斜角度的tan值；<br>float sy:将画布在y轴方向上倾斜相应的角度，sy为倾斜角度的tan值；<br>比如在X轴方向上倾斜45度，tan45=1；</p>
<h2 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void translate (float dx,float dy)</div></pre></td></tr></table></figure>
<p>画布的平移<br>dx，dy平移量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">canvas.drawColor(Color.BLUE);</div><div class="line">canvas.translate(100, 100);</div><div class="line">canvas.drawRect(new Rect(0, 0, 400, 400), mPaint);</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/canvas29.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>坐标从起点（0,0）变成了（100,100）</p>
<h1 id="画布锁定和还原"><a href="#画布锁定和还原" class="headerlink" title="画布锁定和还原"></a>画布锁定和还原</h1><p>以saveXXX和restoreXXX构成的画布锁定和还原</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int save (int saveFlags)</div><div class="line">int save ()</div><div class="line">void restore ()</div></pre></td></tr></table></figure>
<p>save 保存当前矩阵，剪辑到一个私有堆栈。save()方法之后的代码，可以调用Canvas的平移、放缩、旋转、裁剪等操作<br>restore 恢复Canvas之前保存的状态<br>save和restore要配对使用，restore可以比save少，但不能多，如果restore调用次数比save多，会引发Error。</p>
<h1 id="例子源码"><a href="#例子源码" class="headerlink" title="例子源码"></a>例子源码</h1><p><a href="https://github.com/WuXiaolong/AndroidSamples/blob/master/app/src/main/java/com/wuxiaolong/androidsamples/paintcanvas/CanvasView.java" target="_blank" rel="external">https://github.com/WuXiaolong/AndroidSamples/blob/master/app/src/main/java/com/wuxiaolong/androidsamples/paintcanvas/CanvasView.java</a></p>
<h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://developer.android.com/reference/android/graphics/Canvas.html" target="_blank" rel="external">官网api</a><br><a href="http://blog.csdn.net/aigestudio/article/details/41960507" target="_blank" rel="external">自定义控件其实很简单5/12</a><br><a href="http://blog.csdn.net/tianjian4592/article/details/45234419" target="_blank" rel="external">Canvas之translate、scale、rotate、skew方法讲解！</a><br><a href="http://ghui.me/post/2015/10/android-graphics-path/" target="_blank" rel="external">android绘图之Path总结</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写完 &lt;a href=&quot;http://wuxiaolong.github.io/2016/08/20/Paint/&quot;&gt;Android 画笔Paint&lt;/a&gt;，自然少不了Canvas画布，本文延续上篇风格，一一来过Canvas API。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;绘制方法&quot;&gt;&lt;a href=&quot;#绘制方法&quot; class=&quot;headerlink&quot; title=&quot;绘制方法&quot;&gt;&lt;/a&gt;绘制方法&lt;/h1&gt;&lt;p&gt;以drawXXX为主的绘制方法，api如下：&lt;br&gt;
    
    </summary>
    
      <category term="CustomView" scheme="http://wuxiaolong.me/categories/CustomView/"/>
    
    
      <category term="Canvas" scheme="http://wuxiaolong.me/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Android 画笔Paint</title>
    <link href="http://wuxiaolong.me/2016/08/20/Paint/"/>
    <id>http://wuxiaolong.me/2016/08/20/Paint/</id>
    <published>2016-08-20T09:26:15.000Z</published>
    <updated>2016-08-25T11:38:52.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>了解Android Paint，一篇就够</strong>。引用Aige《<a href="http://blog.csdn.net/aigestudio" target="_blank" rel="external">自定义控件其实很简单</a>》系列博客的话“很多时候你压根不需要了解太多原理，只需站在巨人的丁丁上即可”，所谓前人种树后人好乘凉，我这里记录下实践结果。</p>
</blockquote>
<p>我们可以通过Paint中setter方法来为画笔设置属性：<br><a id="more"></a><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint1.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint2.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint3.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>浩浩荡荡来将这些方法一一过一遍：</p>
<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void set(Paint src)</div></pre></td></tr></table></figure>
<p>为当前画笔copy一个画笔</p>
<h1 id="setARGB"><a href="#setARGB" class="headerlink" title="setARGB"></a>setARGB</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void  setARGB(int a, int r, int g, int b)</div></pre></td></tr></table></figure>
<p>设置Paint对象颜色，a代表透明度，r，g，b代表颜色值</p>
<blockquote>
<p>插播：RGB与十六进制区别</p>
</blockquote>
<p>一般在xml里定义颜色可以直接写:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:textColor=&quot;#FF6281&quot;</div></pre></td></tr></table></figure></p>
<p>但是在code代码中就必须写成这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">text.setTextColor(0xffff6281);</div></pre></td></tr></table></figure></p>
<p>xml中透明度写不写无所谓,默认是ff不透明，但是代码中用十六进制0x来表示，就必须跟上ff透明度，不然会默认00全透明。</p>
<h1 id="setAlpha"><a href="#setAlpha" class="headerlink" title="setAlpha"></a>setAlpha</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void  setAlpha(int a)</div></pre></td></tr></table></figure>
<p>设置alpha透明度，范围为0~255</p>
<h1 id="setAntiAlias"><a href="#setAntiAlias" class="headerlink" title="setAntiAlias"></a>setAntiAlias</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void  setAntiAlias(boolean aa)</div></pre></td></tr></table></figure>
<p>是否抗锯齿</p>
<h1 id="setColor"><a href="#setColor" class="headerlink" title="setColor"></a>setColor</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void  setColor(int color)</div></pre></td></tr></table></figure>
<p>设置paint颜色</p>
<h1 id="setColorFilter"><a href="#setColorFilter" class="headerlink" title="setColorFilter"></a>setColorFilter</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ColorFilter setColorFilter (ColorFilter filter)</div></pre></td></tr></table></figure>
<p>设置颜色过滤，<a href="https://developer.android.com/reference/android/graphics/ColorFilter.html" target="_blank" rel="external">ColorFilter</a>有三个子类去实现ColorMatrixColorFilter、LightingColorFilter和PorterDuffColorFilter</p>
<h2 id="ColorMatrixColorFilter"><a href="#ColorMatrixColorFilter" class="headerlink" title="ColorMatrixColorFilter"></a>ColorMatrixColorFilter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class PaintCanvas extends View &#123;</div><div class="line">    private Paint mPaint;</div><div class="line">    //省略构造方法</div><div class="line">    private void init() &#123;</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        // 生成色彩矩阵</div><div class="line">        ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">                0.5F, 0, 0, 0, 0,</div><div class="line">                0, 0.5F, 0, 0, 0,</div><div class="line">                0, 0, 0.5F, 0, 0,</div><div class="line">                0, 0, 0, 1, 0,</div><div class="line">        &#125;);</div><div class="line">        mPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.logo);</div><div class="line">        canvas.drawBitmap(bitmap, 0, 0, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一行表示的R（红色）的向量，第二行表示的G（绿色）的向量，第三行表示的B（蓝色）的向量，最后一行表示A（透明度）的向量，这一顺序必须要正确不能混淆！这个矩阵不同的位置表示的RGBA值，其范围在0.0F至2.0F之间，1为保持原图的RGB值。每一行的第五列数字表示偏移值。</p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint4.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>这是原图效果，增加ColorMatrix，效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint5.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="LightingColorFilter"><a href="#LightingColorFilter" class="headerlink" title="LightingColorFilter"></a>LightingColorFilter</h2><p>只有一个构造方法，<code>LightingColorFilter (int mul, int add)</code>，参数1：mul全称是colorMultiply意为色彩倍增；参数2：add全称是colorAdd意为色彩添加，这两个值都是16进制的色彩值0xAARRGGBB。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置颜色过滤,去掉绿色</div><div class="line">mPaint.setColorFilter(new LightingColorFilter(0xFFFF00FF, 0x00000000));</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint6.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="PorterDuffColorFilter"><a href="#PorterDuffColorFilter" class="headerlink" title="PorterDuffColorFilter"></a>PorterDuffColorFilter</h2><p>也只有一个构造方法，<code>PorterDuffColorFilter (int color, PorterDuff.Mode mode)</code>，参数1：16进制表示的颜色值；参数2：PorterDuff内部类Mode中的一个常量值，这个值表示混合模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置颜色过滤,Color的值设为红色，模式PorterDuff.Mode.DARKEN变暗</div><div class="line">mPaint.setColorFilter(new PorterDuffColorFilter(Color.RED, PorterDuff.Mode.DARKEN));</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint7.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>混合模式还有很多，不仅是应用于图像色彩混合，还应用于图形混合。</p>
<h1 id="setDither"><a href="#setDither" class="headerlink" title="setDither"></a>setDither</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setDither(boolean dither)</div></pre></td></tr></table></figure>
<p>设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰</p>
<h1 id="setFakeBoldText"><a href="#setFakeBoldText" class="headerlink" title="setFakeBoldText"></a>setFakeBoldText</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setFakeBoldText(boolean fakeBoldText)</div></pre></td></tr></table></figure>
<p>设置伪粗体文本</p>
<h1 id="setFilterBitmap"><a href="#setFilterBitmap" class="headerlink" title="setFilterBitmap"></a>setFilterBitmap</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setFilterBitmap(boolean filter)</div></pre></td></tr></table></figure>
<p>设置位图进行滤波处理</p>
<h1 id="setHinting"><a href="#setHinting" class="headerlink" title="setHinting"></a>setHinting</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setHinting (int mode)</div></pre></td></tr></table></figure>
<p>Added in API level 14，设置暗示模式，HINTING_OFF 或 HINTING_ON</p>
<h1 id="setLetterSpacing"><a href="#setLetterSpacing" class="headerlink" title="setLetterSpacing"></a>setLetterSpacing</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setLetterSpacing (float letterSpacing)</div></pre></td></tr></table></figure>
<p>Added in API level 21，设置文本字母间距，默认0，负值收紧文本</p>
<h1 id="setLinearText"><a href="#setLinearText" class="headerlink" title="setLinearText"></a>setLinearText</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setLinearText(boolean linearText)</div></pre></td></tr></table></figure>
<p>设置线性文本</p>
<h1 id="setMaskFilter"><a href="#setMaskFilter" class="headerlink" title="setMaskFilter"></a>setMaskFilter</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MaskFilter setMaskFilter (MaskFilter maskfilter)</div></pre></td></tr></table></figure>
<p>设置滤镜的效果，<a href="https://developer.android.com/reference/android/graphics/MaskFilter.html" target="_blank" rel="external">MaskFilter</a>有两个子类实现BlurMaskFilter, EmbossMaskFilter</p>
<h2 id="BlurMaskFilter"><a href="#BlurMaskFilter" class="headerlink" title="BlurMaskFilter"></a>BlurMaskFilter</h2><p>设置画笔模糊阴影效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setMaskFilter(new BlurMaskFilter(20f, BlurMaskFilter.Blur.SOLID));</div></pre></td></tr></table></figure></p>
<p>参数1：模糊延伸半径，必须&gt;0；<br>参数2：有四种枚举<br>NORMAL，同时绘制图形本身内容+内阴影+外阴影,正常阴影效果<br>INNER，绘制图形内容本身+内阴影，不绘制外阴影<br>OUTER，不绘制图形内容以及内阴影，只绘制外阴影<br>SOLID，只绘制外阴影和图形内容本身，不绘制内阴影<br>BlurMaskFilter绘制的Bitmap基本完全不受影响</p>
<p>四种枚举效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint17.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint18.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint19.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint20.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="EmbossMaskFilter"><a href="#EmbossMaskFilter" class="headerlink" title="EmbossMaskFilter"></a>EmbossMaskFilter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//Paint的setMaskFilter不被GPU支持,为了确保画笔的setMaskFilter能供起效，我们需要禁用掉GPU硬件加速或AndroidManifest.xml文件中设置android:hardwareAccelerated为false</div><div class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">    //View从API Level 11才加入setLayerType方法</div><div class="line">    //设置软件渲染模式绘图</div><div class="line">    this.setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div><div class="line">&#125;</div><div class="line">//设置浮雕滤镜效果，参数1：光源指定方向；参数2:环境光亮度，取值0-1,值越小越暗；参数3：镜面高光反射系数，值越小反射越强；参数4：模糊延伸半径</div><div class="line">mPaint.setMaskFilter(new EmbossMaskFilter(new float[]&#123;1, 1, 1&#125;, 0.4f, 8f, 3f));</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint21.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="setPathEffect"><a href="#setPathEffect" class="headerlink" title="setPathEffect"></a>setPathEffect</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PathEffect  setPathEffect(PathEffect effect)</div></pre></td></tr></table></figure>
<p>设置路径效果，<a href="https://developer.android.com/reference/android/graphics/PathEffect.html" target="_blank" rel="external">PathEffect</a>有6个子类实现ComposePathEffect, CornerPathEffect, DashPathEffect, DiscretePathEffect, PathDashPathEffect, SumPathEffect<br>具体代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">public class PaintCanvas extends View &#123;</div><div class="line">    private Paint mPaint;   </div><div class="line">    // 路径对象</div><div class="line">    private Path mPath;</div><div class="line">    private PathEffect[] pathEffects = new PathEffect[7];</div><div class="line">    private float mPhase=5;</div><div class="line"></div><div class="line">    //省略构造方法</div><div class="line"></div><div class="line">    private void init() &#123;       </div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(5);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        initPath();       </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initPath() &#123;</div><div class="line">        // 实例化路径</div><div class="line">        mPath = new Path();</div><div class="line">        // 定义路径的起点</div><div class="line">        mPath.moveTo(10, 50);</div><div class="line"></div><div class="line">        // 定义路径的各个点</div><div class="line">        for (int i = 0; i &lt;= 30; i++) &#123;</div><div class="line">            mPath.lineTo(i * 35, (float) (Math.random() * 100));</div><div class="line">        &#125;</div><div class="line">        //什么都不处理</div><div class="line">        pathEffects[0] = null;</div><div class="line">        //参数1：线段之间的圆滑程度</div><div class="line">        pathEffects[1] = new CornerPathEffect(10);</div><div class="line">        //参数1：间隔线条长度(length&gt;=2)，如float[] &#123;20, 10&#125;的偶数参数20定义了我们第一条实线的长度，</div><div class="line">        //而奇数参数10则表示第一条虚线的长度，后面不再有数据则重复第一个数以此往复循环；参数2：虚实线间距</div><div class="line">        pathEffects[2] = new DashPathEffect(new float[]&#123;20, 10&#125;, mPhase);</div><div class="line">        //参数1:值越小杂点越密集；参数2:杂点突出的大小，值越大突出的距离越大</div><div class="line">        pathEffects[3] = new DiscretePathEffect(5.0f, 10.0f);</div><div class="line">        Path path = new Path();</div><div class="line">        path.addRect(0, 0, 8, 8, Path.Direction.CCW);</div><div class="line">        //定义路径虚线的样式,参数1：path；参数2：实线的长度；参数3：虚实线间距</div><div class="line">        pathEffects[4] = new PathDashPathEffect(path, 20, mPhase, PathDashPathEffect.Style.ROTATE);</div><div class="line">        pathEffects[5] = new ComposePathEffect(pathEffects[2], pathEffects[4]);</div><div class="line">        //ComposePathEffect和SumPathEffect都可以用来组合两种路径效果,具体区别（不知道如何描述）小伙伴们自己试试</div><div class="line">        pathEffects[6] = new SumPathEffect(pathEffects[4], pathEffects[3]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;      </div><div class="line">         /*</div><div class="line">         * 绘制路径</div><div class="line">         */</div><div class="line">        for (int i = 0; i &lt; pathEffects.length; i++) &#123;</div><div class="line">            mPaint.setPathEffect(pathEffects[i]);</div><div class="line">            canvas.drawPath(mPath, mPaint);</div><div class="line">            // 每绘制一条将画布向下平移250个像素</div><div class="line">            canvas.translate(0, 250);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint17.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="setRasterizer"><a href="#setRasterizer" class="headerlink" title="setRasterizer"></a>setRasterizer</h1><p><del>Rasterizer  setRasterizer(Rasterizer rasterizer)</del><br>设置光栅化，API21已过时</p>
<h1 id="setShader"><a href="#setShader" class="headerlink" title="setShader"></a>setShader</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Shader  setShader(Shader shader)</div></pre></td></tr></table></figure>
<p>设置着色器，<a href="https://developer.android.com/reference/android/graphics/Shader.html" target="_blank" rel="external">Shader</a> 子类实现有BitmapShader, ComposeShader, LinearGradient, RadialGradient, SweepGradient</p>
<h2 id="BitmapShader"><a href="#BitmapShader" class="headerlink" title="BitmapShader"></a>BitmapShader</h2><p>对图形进行渲染，构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BitmapShader (Bitmap bitmap,Shader.TileMode tileX,Shader.TileMode tileY)</div></pre></td></tr></table></figure></p>
<p>tileX、tileY参数Shader.TileMode有三个：<br>CLAMP 重复最后一个颜色至最后<br>MIRROR 重复着色的图像水平或垂直方向已镜像方式填充会有翻转效果<br>REPEAT 重复着色的图像水平或垂直方向</p>
<p>设置tileX、tileY为Shader.TileMode.CLAMP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class PaintCanvas extends View &#123;</div><div class="line">    private Paint mPaint;</div><div class="line">    private Context mContext;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private BitmapShader mShader;</div><div class="line"></div><div class="line">    // 省略构造方法</div><div class="line">    </div><div class="line">    private void init() &#123;</div><div class="line">        mBitmap = BitmapFactory.decodeResource(mContext.getResources(), R.mipmap.logo);</div><div class="line">        mShader= new BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setAntiAlias(true);        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mPaint.setShader(mBitmapShader);</div><div class="line">        canvas.drawCircle(500, 550, 500, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint12.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>设置tileX、tileY为Shader.TileMode.MIRROR<br>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint11.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>设置tileX、tileY为Shader.TileMode.REPEAT<br>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint10.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="LinearGradient"><a href="#LinearGradient" class="headerlink" title="LinearGradient"></a>LinearGradient</h2><p>设置线性渐变效果，有两个构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//坐标(x0,y0)渐变直线的起点，坐标(x1,y1)渐变直线的终点，color0和color1分别表示了渐变的起始颜色和终止颜色，TileMode也有CLAMP 、REPEAT 和 MIRROR三个取值</div><div class="line">LinearGradient(float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile)</div><div class="line">LinearGradient(float x0, float y0, float x1, float y1, int[] colors, float[] positions,Shader.TileMode tile)</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class PaintCanvas extends View &#123;</div><div class="line">    private Paint mPaint;</div><div class="line">    private Context mContext;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private Shader mShader;</div><div class="line"></div><div class="line">    // 省略构造方法</div><div class="line">    </div><div class="line">    private void init() &#123;</div><div class="line">        mShader = new LinearGradient(0, 0, 500, 500, Color.BLUE, Color.GREEN,Shader.TileMode.CLAMP);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setAntiAlias(true);        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mPaint.setShader(mBitmapShader);</div><div class="line">        canvas.drawCircle(500, 550, 400, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint13.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>设置REPEAT 和 MIRROR就不贴图片了，小伙伴们可以自己试试看看效果。</p>
<h2 id="RadialGrdient"><a href="#RadialGrdient" class="headerlink" title="RadialGrdient"></a>RadialGrdient</h2><p>设置光束从中心向四周发散的辐射渐变效果，构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//坐标(centerX,centerY)中心点坐标，radius圆的半径，centerColor中心颜色，edgeColor圆的轮廓颜色，颜色逐渐从centerColor渐变到edgeColor，TileMode也有CLAMP 、REPEAT 和 MIRROR三个取值</div><div class="line">RadialGradient(float centerX, float centerY, float radius, int centerColor, int edgeColor, Shader.TileMode tileMode)</div><div class="line">RadialGradient(float centerX, float centerY, float radius, int[] colors, float[] stops, Shader.TileMode tileMode)</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class PaintCanvas extends View &#123;</div><div class="line">    private Paint mPaint;</div><div class="line">    private Context mContext;</div><div class="line">    private Shader mShader;</div><div class="line"></div><div class="line">    // 省略构造方法</div><div class="line">    </div><div class="line">    private void init() &#123;</div><div class="line">        mShader = new RadialGradient(500, 500, 400, Color.BLUE, Color.GREEN, Shader.TileMode.CLAMP);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setAntiAlias(true);        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mPaint.setShader(mBitmapShader);</div><div class="line">        canvas.drawCircle(500, 550, 400, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint14.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>设置REPEAT 和 MIRROR也不贴图片了。</p>
<h2 id="SweepGradient"><a href="#SweepGradient" class="headerlink" title="SweepGradient"></a>SweepGradient</h2><p>设置绕着某中心点进行360度旋转渐变效果，构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//坐标(cx,cy)决定了中心点的位置，会绕着该中心点进行360度旋转。color0表示的是起点的颜色，color1表示的是终点的颜色</div><div class="line">SweepGradient(float cx, float cy, int color0, int color1)</div><div class="line">//坐标(cx,cy)决定了中心点的位置,colors颜色数组,position取值范围为[0,1]，0和1都表示3点钟位置，0.25表示6点钟位置，0.5表示9点钟位置，0.75表示12点钟位置，诸如此类</div><div class="line">SweepGradient(float cx, float cy, int[] colors, float[] positions)</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class PaintCanvas extends View &#123;</div><div class="line">    private Paint mPaint;</div><div class="line">    private Context mContext;</div><div class="line">    private Shader mShader;</div><div class="line"></div><div class="line">    // 省略构造方法</div><div class="line">    </div><div class="line">    private void init() &#123;</div><div class="line">        mShader = new SweepGradient(500, 500, Color.BLUE, Color.GREEN);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setAntiAlias(true);        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mPaint.setShader(mBitmapShader);</div><div class="line">        canvas.drawCircle(500, 550, 400, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint15.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="ComposeShader"><a href="#ComposeShader" class="headerlink" title="ComposeShader"></a>ComposeShader</h2><p>混合，有两个构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//shaderA对应下层图形，shaderB对应上层图形</div><div class="line">ComposeShader(Shader shaderA, Shader shaderB, Xfermode mode)</div><div class="line">ComposeShader(Shader shaderA, Shader shaderB, PorterDuff.Mode mode)</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class PaintCanvas extends View &#123;</div><div class="line">    private Paint mPaint;</div><div class="line">    private Context mContext;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private Shader bitmapShader, linearGradient, composeShader;</div><div class="line"></div><div class="line">    // 省略构造方法</div><div class="line">    </div><div class="line">    private void init() &#123;</div><div class="line">        mBitmap = BitmapFactory.decodeResource(mContext.getResources(), R.mipmap.logo);</div><div class="line">        bitmapShader = new BitmapShader(mBitmap, Shader.TileMode.MIRROR, Shader.TileMode.MIRROR);</div><div class="line">        linearGradient = new LinearGradient(0, 0, mBitmap.getWidth(), mBitmap.getHeight(), Color.BLUE, Color.GREEN, Shader.TileMode.CLAMP);</div><div class="line">        //bitmapShader对应下层图形，linearGradient对应上层图形，像素颜色混合采用MULTIPLY模式</div><div class="line">        composeShader = new ComposeShader(bitmapShader, linearGradient, PorterDuff.Mode.MULTIPLY);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setAntiAlias(true);        </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mPaint.setShader(mBitmapShader);</div><div class="line">        canvas.drawCircle(500, 550, 400, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint16.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="setShadowLayer"><a href="#setShadowLayer" class="headerlink" title="setShadowLayer"></a>setShadowLayer</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setShadowLayer(float radius, float dx, float dy, int shadowColor)</div></pre></td></tr></table></figure>
<p>图形添加一个阴影层效果</p>
<h1 id="setStrikeThruText"><a href="#setStrikeThruText" class="headerlink" title="setStrikeThruText"></a>setStrikeThruText</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setStrikeThruText (boolean strikeThruText)</div></pre></td></tr></table></figure>
<p>设置删除线</p>
<h1 id="setStrokeCap"><a href="#setStrokeCap" class="headerlink" title="setStrokeCap"></a>setStrokeCap</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setStrokeCap (Paint.Cap cap)</div></pre></td></tr></table></figure>
<p>当设置setStyle是Stroke或StrokeAndFill，设置笔刷的图形样式，如圆形样式Cap.ROUND或方形样式Cap.SQUARE </p>
<h1 id="setStrokeJoin"><a href="#setStrokeJoin" class="headerlink" title="setStrokeJoin"></a>setStrokeJoin</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setStrokeJoin (Paint.Join join)</div></pre></td></tr></table></figure>
<p>当设置setStyle是Stroke或StrokeAndFill，设置绘制时各图形的结合方式，如影响矩形角的外轮廓</p>
<h1 id="setStrokeMiter"><a href="#setStrokeMiter" class="headerlink" title="setStrokeMiter"></a>setStrokeMiter</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setStrokeMiter (float miter)</div></pre></td></tr></table></figure>
<p>当设置setStyle是Stroke或StrokeAndFill，设置斜切</p>
<h1 id="setStrokeWidth"><a href="#setStrokeWidth" class="headerlink" title="setStrokeWidth"></a>setStrokeWidth</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setStrokeWidth (float width)</div></pre></td></tr></table></figure>
<p>当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的粗细度 </p>
<h1 id="setStyle"><a href="#setStyle" class="headerlink" title="setStyle"></a>setStyle</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setStyle (Paint.Style style)</div></pre></td></tr></table></figure>
<p>设置画笔样式，画笔样式分三种：<br> Paint.Style.STROKE：描边<br> Paint.Style.FILL_AND_STROKE：描边并填充<br> Paint.Style.FILL：填充 </p>
<h1 id="setSubpixelText"><a href="#setSubpixelText" class="headerlink" title="setSubpixelText"></a>setSubpixelText</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setSubpixelText (boolean subpixelText)</div></pre></td></tr></table></figure>
<p>有助于文本在LCD屏幕上的显示效果</p>
<h1 id="setTextAlign"><a href="#setTextAlign" class="headerlink" title="setTextAlign"></a>setTextAlign</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setTextAlign(Paint.Align align)</div></pre></td></tr></table></figure>
<p>设置文本对齐</p>
<h1 id="setTextScaleX"><a href="#setTextScaleX" class="headerlink" title="setTextScaleX"></a>setTextScaleX</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setTextScaleX(float scaleX)</div></pre></td></tr></table></figure>
<p>设置文本缩放倍数，1.0f为原始</p>
<h1 id="setTextSize"><a href="#setTextSize" class="headerlink" title="setTextSize"></a>setTextSize</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setTextSize(float textSize)</div></pre></td></tr></table></figure>
<p>设置字体大小</p>
<h1 id="setTextSkewX"><a href="#setTextSkewX" class="headerlink" title="setTextSkewX"></a>setTextSkewX</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setTextSkewX (float skewX)</div></pre></td></tr></table></figure>
<p>设置斜体文字，skewX为倾斜弧度，默认值0，大于0，向左斜，小于0，向右斜</p>
<h1 id="setTypeface"><a href="#setTypeface" class="headerlink" title="setTypeface"></a>setTypeface</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Typeface  setTypeface(Typeface typeface)</div></pre></td></tr></table></figure>
<p>设置字体，Typeface包含了字体的类型，粗细，还有倾斜、颜色等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setTypeface(Typeface.SANS_SERIF);</div></pre></td></tr></table></figure>
<h1 id="setUnderlineText"><a href="#setUnderlineText" class="headerlink" title="setUnderlineText"></a>setUnderlineText</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setUnderlineText(boolean underlineText)</div></pre></td></tr></table></figure>
<p>设置下划线</p>
<h1 id="setXfermode"><a href="#setXfermode" class="headerlink" title="setXfermode"></a>setXfermode</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Xfermode setXfermode (Xfermode xfermode)</div></pre></td></tr></table></figure>
<p>设置图像混合模式，<a href="https://developer.android.com/reference/android/graphics/Xfermode.html" target="_blank" rel="external">Xfermode</a> 有个子类去实现PorterDuffXfermode</p>
<h2 id="PorterDuffXfermode"><a href="#PorterDuffXfermode" class="headerlink" title="PorterDuffXfermode"></a>PorterDuffXfermode</h2><p>构造方法<code>PorterDuffXfermode(PorterDuff.Mode mode)</code>，参数就是上面的提到的，图形混合模式如图：</p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/PaintCanvas1.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>Dst：先画(下层)的图形；Src：后画(上层)的图形，然而被网上这张图片误导了，解释见<a href="http://blog.csdn.net/iispring/article/details/50472485" target="_blank" rel="external">孙群博客</a>，他也给了最终运行效果：</p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint8.jpg" alt=""></p>
<p>我一一运行确实是如此，这里贴出Mode 为Screen代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class PaintCanvas extends View &#123;</div><div class="line">    private Paint mPaint;</div><div class="line">    private PorterDuffXfermode porterDuffXfermode;// 图形混合模式</div><div class="line">    private Context mContext;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    //省略构造方法</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        mBitmap = BitmapFactory.decodeResource(mContext.getResources(), R.mipmap.logo);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        // 实例化混合模式</div><div class="line">        porterDuffXfermode = new PorterDuffXfermode(PorterDuff.Mode.SCREEN);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        int canvasWidth = canvas.getWidth();</div><div class="line">        int canvasHeight = canvas.getHeight();</div><div class="line">        //新建一个layer,放置在canvas默认layer的上部，产生的layer初始时是完全透明的</div><div class="line">        int layerId = canvas.saveLayer(0, 0, canvasWidth, canvasHeight, null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        //dst是先画的图形</div><div class="line">        canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line">        //设置混合模式</div><div class="line">        mPaint.setXfermode(porterDuffXfermode);</div><div class="line">        //src是后画的图形</div><div class="line">        mPaint.setColor(0xFFFFCC44);</div><div class="line">        canvas.drawCircle(600, 600, 200, mPaint);</div><div class="line">        //还原混合模式</div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        //或canvas.restore()把这个layer绘制到canvas默认的layer上去</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/paint9.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="例子源码"><a href="#例子源码" class="headerlink" title="例子源码"></a>例子源码</h1><p><a href="https://github.com/WuXiaolong/AndroidSamples/blob/master/app/src/main/java/com/wuxiaolong/androidsamples/paintcanvas/PaintView.java" target="_blank" rel="external">https://github.com/WuXiaolong/AndroidSamples/blob/master/app/src/main/java/com/wuxiaolong/androidsamples/paintcanvas/PaintCanvas.java</a></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这篇文章真长，从开始写到最后的校对，花了很长时间，每段代码运行都截图上传。只能说实践是检验真理的唯一标准，不一定知道每个原理，都必须知道每个是什么样子的效果，记录完成方便自己日后查找，也方便大家哦，如果您能读到这篇文章的话。最后的最后，萨摩耶有话说：<strong>我只想安静做一只可爱的狗狗</strong>！</p>
<h1 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h1><p><a href="https://developer.android.com/reference/android/graphics/Paint.html" target="_blank" rel="external">官网Paint</a><br><a href="http://blog.csdn.net/aigestudio/article/details/41316141" target="_blank" rel="external">自定义控件其实很简单1/6</a><br><a href="http://blog.csdn.net/aigestudio/article/details/41447349" target="_blank" rel="external">自定义控件其实很简单1/4</a><br><a href="http://blog.csdn.net/iispring/article/details/50472485" target="_blank" rel="external">Android中Canvas绘图之PorterDuffXfermode使用及工作原理详解</a><br><a href="http://blog.csdn.net/iispring/article/details/49877661" target="_blank" rel="external"> Android中Canvas绘图之MaskFilter图文详解（附源码下载）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;了解Android Paint，一篇就够&lt;/strong&gt;。引用Aige《&lt;a href=&quot;http://blog.csdn.net/aigestudio&quot;&gt;自定义控件其实很简单&lt;/a&gt;》系列博客的话“很多时候你压根不需要了解太多原理，只需站在巨人的丁丁上即可”，所谓前人种树后人好乘凉，我这里记录下实践结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以通过Paint中setter方法来为画笔设置属性：&lt;br&gt;
    
    </summary>
    
      <category term="CustomView" scheme="http://wuxiaolong.me/categories/CustomView/"/>
    
    
      <category term="Paint" scheme="http://wuxiaolong.me/tags/Paint/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 使用小技巧</title>
    <link href="http://wuxiaolong.me/2016/08/16/AndroidstudioGuide/"/>
    <id>http://wuxiaolong.me/2016/08/16/AndroidstudioGuide/</id>
    <published>2016-08-16T14:29:28.000Z</published>
    <updated>2016-08-25T11:38:52.898Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>当初从eclipse转到Android Studio，为了快速适应Android Studio，我把它的快捷键设置了eclipse了，如何设置，见：<a href="http://wuxiaolong.me/2014/10/21/Android-Studio-shortcut-keys-arranged-like-Eclipse/">Android Studio快捷键设置成跟Eclipse一样</a>，至于Android Studio本身的快捷键没去研究，还是比较习惯eclipse那套快捷键。本文介绍一些会提高工作效率可能您还不知道的Android Studio小技巧&amp;快捷键。</p>
</blockquote>
<h1 id="代码提示不区别大小写"><a href="#代码提示不区别大小写" class="headerlink" title="代码提示不区别大小写"></a>代码提示不区别大小写</h1><p>使用方法：Editor标签下-Code Completion下-Case sensitive completion选择None，当输入代码，不区别大小写也能弹出代码提示<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu14.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><a id="more"></a></p>
<h1 id="变量命名提示"><a href="#变量命名提示" class="headerlink" title="变量命名提示"></a>变量命名提示</h1><p>变量命名都是用小写m开头，Android Studio提示却是这样的：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu7.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>如何输入m，提示mRetrofit呢？<br>使用方法：Code Style-Java-Code Generation-Fields<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu8.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>输入m，达到预期效果：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu6.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="自动检查dependencies更新"><a href="#自动检查dependencies更新" class="headerlink" title="自动检查dependencies更新"></a>自动检查dependencies更新</h1><p>使用Gradle编译Android项目，会依赖很多第三方库如：<code>compile &#39;com.squareup.retrofit2:retrofit:2.0.0-beta4&#39;</code>，问题：如何让Android Studio自动检查第三方库是否有更新呢？<br>使用方法：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu10.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>勾上Newer Library Versions Available，然后点击Android Studio菜单Analyze-Run inspections By Name(快捷键：Shift+Ctrl+Alt+I)<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu11.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>输入newer，选择Module，Inspecting Code…<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu12.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="查找使用"><a href="#查找使用" class="headerlink" title="查找使用"></a>查找使用</h1><p>使用方法：将鼠标放在需要查找的类或变量，选择Find Usages<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu9.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="快速进入类"><a href="#快速进入类" class="headerlink" title="快速进入类"></a>快速进入类</h1><p>使用方法：Shift+Ctrl+T<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu13.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>当不勾上Include non-project class搜的是当前Module，勾上是全局的。</p>
<h1 id="上下移动行"><a href="#上下移动行" class="headerlink" title="上下移动行"></a>上下移动行</h1><p>使用方法：Alt+up/down<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu1.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="上下复制行"><a href="#上下复制行" class="headerlink" title="上下复制行"></a>上下复制行</h1><p>使用方法：Ctrl+Alt+up/down<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu2.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h1><p>使用方法：按住Alt+鼠标左键选择<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu3.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="删除一行"><a href="#删除一行" class="headerlink" title="删除一行"></a>删除一行</h1><p>使用方法：Ctrl+D<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu4.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="快捷键运行"><a href="#快捷键运行" class="headerlink" title="快捷键运行"></a>快捷键运行</h1><p>使用方法：Shift+Alt+X，代替每次都得点击去运行<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asu5.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="Android-Studio调试技巧"><a href="#Android-Studio调试技巧" class="headerlink" title="Android Studio调试技巧"></a>Android Studio调试技巧</h1><p><a href="http://blog.csdn.net/yy1300326388/article/details/46501871" target="_blank" rel="external">[Android Studio 权威教程]断点调试和高级调试</a></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当初从eclipse转到Android Studio，为了快速适应Android Studio，我把它的快捷键设置了eclipse了，如何设置，见：&lt;a href=&quot;http://wuxiaolong.me/2014/10/21/Android-Studio-shortcut-keys-arranged-like-Eclipse/&quot;&gt;Android Studio快捷键设置成跟Eclipse一样&lt;/a&gt;，至于Android Studio本身的快捷键没去研究，还是比较习惯eclipse那套快捷键。本文介绍一些会提高工作效率可能您还不知道的Android Studio小技巧&amp;amp;快捷键。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;代码提示不区别大小写&quot;&gt;&lt;a href=&quot;#代码提示不区别大小写&quot; class=&quot;headerlink&quot; title=&quot;代码提示不区别大小写&quot;&gt;&lt;/a&gt;代码提示不区别大小写&lt;/h1&gt;&lt;p&gt;使用方法：Editor标签下-Code Completion下-Case sensitive completion选择None，当输入代码，不区别大小写也能弹出代码提示&lt;br&gt;&lt;img src=&quot;http://7q5c2h.com1.z0.glb.clouddn.com/asu14.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="http://wuxiaolong.me/categories/Android-Studio/"/>
    
    
      <category term="Android Studio" scheme="http://wuxiaolong.me/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>一个程序猿的幸福历程</title>
    <link href="http://wuxiaolong.me/2016/07/24/myHappyWay/"/>
    <id>http://wuxiaolong.me/2016/07/24/myHappyWay/</id>
    <published>2016-07-24T13:52:59.000Z</published>
    <updated>2016-08-25T11:38:52.950Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>“很多人跟我说，你有房有车有老婆有小孩，人生圆满了啊，真的是这样吗？”</p>
</blockquote>
<h1 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h1><p>我和我老婆是校友，我是软件专业，她是财务专业，她小我一届。至于怎么认识的，已记不得，只是一直是QQ好友，11年暑假见面就在一起了。</p>
<h1 id="恋爱"><a href="#恋爱" class="headerlink" title="恋爱"></a>恋爱</h1><p><strong>恋爱应该是最开心的一段时光</strong>，有时间我们就出来玩，去公园，爬山，吃饭啥的。<br><a id="more"></a><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay1.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>女票很喜欢吃辣，我一开始不怎么吃，到后来我吃辣也是杠杠的。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay2.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>就这样<strong>无忧无虑</strong>过了一年，我毕业了，尽管刚刚实习薪资才1500，但我们依旧过得十分开心，那段时光是值得永久保存的。</p>
<h1 id="谈婚论嫁"><a href="#谈婚论嫁" class="headerlink" title="谈婚论嫁"></a>谈婚论嫁</h1><p>这个阶段我是不太愿意多回顾，但是是人生必经历的阶段，很多小情侣恐怕就在双方父母见面后谈不拢被迫选择分手的吧。如果这个阶段分手，我觉得太可惜。如果真的分手，那可能父母太自私，打着为小孩的幸福名义，实则为了自己的面子。</p>
<p>我在这个阶段细节：此处省略一万字。只能说家家有本难念的经，我这个“中间人”显得如此的无助和无奈，我也在女票面前哭的<strong>稀里哗啦</strong>（我记事一来，第一次哭，也是<strong>最后一次</strong>），我也想过放弃这段感情。</p>
<h1 id="怀孕"><a href="#怀孕" class="headerlink" title="怀孕"></a>怀孕</h1><p>都说孕妇易怒，果不假，再加上老婆脾气本身就不太好，不过我想说的是，老婆大部分时间都是好沟通，脾气也是不错的，偶尔“发发疯”，忍忍就过了，谁让你是祖宗，而且又怀孕了。当然也有没有忍着的时候，于是 <a href="http://mp.weixin.qq.com/s?__biz=MzI4MzE2MTQ5Mw==&amp;mid=2649752167&amp;idx=1&amp;sn=b607fb63d412f9cbccbb247c7c8d82da&amp;scene=21#wechat_redirect" target="_blank" rel="external">如何逼疯程序猿</a>。</p>
<h1 id="宝宝到来的准备"><a href="#宝宝到来的准备" class="headerlink" title="宝宝到来的准备"></a>宝宝到来的准备</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay4.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay5.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay6.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay7.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay9.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay10.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay11.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>因此我也付出了“代价”，跟着老婆后面天天吃好的，胖了<strong>10多斤</strong>！！！<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay12.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="宝宝的降临"><a href="#宝宝的降临" class="headerlink" title="宝宝的降临"></a>宝宝的降临</h1><p>2016年7月16号10点55分，一个小胖子出生，<strong>8斤</strong>，而且还是<strong>顺产</strong>。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay8.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>老婆预产期是10号，我8号就请了陪产假，在家等着宝宝的出生，谁知老婆一点反应都没有，肚子也不疼。16号当天早上四点多，老婆把我从睡梦里叫醒，说羊水破了，我问要去医院吗，老婆说要不等天亮，就上床睡，但是老婆肚子好痛，还是马上去了医院。</p>
<p>挂号办理住院手续，做B超，然后带她进产房去检查，此时8点多，可是很久都没有出来，不会在里面生了吧，我一直在产房等，拿水进去，来回走动，焦急的很。11点多，我正好去拿东西，就听到丈人喊，生了，8斤，男孩，嗯，终于安心了。还等2个小时，需要观察一下大人和小孩。</p>
<p>当产房门打开，推着他们出来，我还难以置信，宝宝就这样来了？！也好像不认识了老婆，在我想象，不是出来就打我咬我吗，看她如此淡定看着娃，难道是因为升级当妈的缘故，瞬间觉得老婆真的好伟大。</p>
<p><strong>老婆，你比我想象中更加坚强</strong>。</p>
<h1 id="吴思睿"><a href="#吴思睿" class="headerlink" title="吴思睿"></a>吴思睿</h1><p>其实男宝宝女宝宝，我们是无所谓的，我内心觉得是女宝宝，因为身边的程序猿生的娃大多数是女宝宝。</p>
<p>宝宝，我只希望你能<strong>健康成长</strong>，做个<strong>思想独立</strong>、<strong>善良</strong>的人，让我们一起来呵护你的麻麻哈。</p>
<p>当然，什么样子的父母什么样子的小孩，我会言传声教，为你树立好的榜样，做好你的人生向导。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay13.JPG?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>我希望我们就像电视剧里一样，<strong>从此我们一家三口过上了幸福的生活</strong>。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/myHappyWay3.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“很多人跟我说，你有房有车有老婆有小孩，人生圆满了啊，真的是这样吗？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;初识&quot;&gt;&lt;a href=&quot;#初识&quot; class=&quot;headerlink&quot; title=&quot;初识&quot;&gt;&lt;/a&gt;初识&lt;/h1&gt;&lt;p&gt;我和我老婆是校友，我是软件专业，她是财务专业，她小我一届。至于怎么认识的，已记不得，只是一直是QQ好友，11年暑假见面就在一起了。&lt;/p&gt;
&lt;h1 id=&quot;恋爱&quot;&gt;&lt;a href=&quot;#恋爱&quot; class=&quot;headerlink&quot; title=&quot;恋爱&quot;&gt;&lt;/a&gt;恋爱&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;恋爱应该是最开心的一段时光&lt;/strong&gt;，有时间我们就出来玩，去公园，爬山，吃饭啥的。&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="http://wuxiaolong.me/categories/Life/"/>
    
    
      <category term="Happy" scheme="http://wuxiaolong.me/tags/Happy/"/>
    
  </entry>
  
  <entry>
    <title>Android Support Library 之 夜间模式</title>
    <link href="http://wuxiaolong.me/2016/07/12/appcompatDayNight/"/>
    <id>http://wuxiaolong.me/2016/07/12/appcompatDayNight/</id>
    <published>2016-07-12T15:12:23.000Z</published>
    <updated>2016-09-08T12:21:19.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>夜间模式实现方式<br>1、通过切换theme来实现夜间模式。<br>优点：可以匹配多套主题，并不局限于黑白模式<br>缺点：需要大量定义主题<br>详见博客：<a href="http://wuxiaolong.me/2015/08/19/ChangeTheme/">http://wuxiaolong.me/2015/08/19/ChangeTheme/</a></p>
<p>2、通过修改uiMode来切换夜间模式。<br>修改uimode是修改Configuration，这种主题切换只限于黑白模式，没有其他模式，不需要大量定义主题，即本文介绍的内容。</p>
<h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/nightTheme.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><a id="more"></a></p>
<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>（1）app/build.gradle<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:appcompat-v7:24.0.0'</span></div></pre></td></tr></table></figure></p>
<p>（2）Activity须继承AppCompatActivity</p>
<p>（3）Theme.AppCompat.DayNight<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;style name="AppTheme" parent="Theme.AppCompat.DayNight"&gt;</div><div class="line">    &lt;!-- Customize your theme here. --&gt;</div><div class="line">    &lt;item name="colorPrimary"&gt;@color/colorPrimary&lt;/item&gt;</div><div class="line">    &lt;item name="colorPrimaryDark"&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class="line">    &lt;item name="colorAccent"&gt;@color/colorAccent&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;style name="AppTheme.NoActionBar"&gt;</div><div class="line">    &lt;item name="windowActionBar"&gt;false&lt;/item&gt;</div><div class="line">    &lt;item name="windowNoTitle"&gt;true&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>应用全局主题推荐在 Application 的onCreate()中进行设置<br>AppCompatDelegate.setDefaultNightMode(int mode);</p>
<p>它有四个可选值，分别是：<br>MODE_NIGHT_NO： 使用亮色(light)主题，不使用夜间模式<br>MODE_NIGHT_YES：使用暗色(dark)主题，使用夜间模式<br>MODE_NIGHT_AUTO：根据当前时间自动切换 亮色(light)/暗色(dark)主题<br>MODE_NIGHT_FOLLOW_SYSTEM(默认选项)：设置为跟随系统，通常为 MODE_NIGHT_NO</p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>动态的设定主题，需要切换主题调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);</div><div class="line"><span class="comment">//调用recreate()使设置生效</span></div><div class="line">recreate();</div></pre></td></tr></table></figure></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学。不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="setDefaultNightMode-与setLocalNightMode-区别"><a href="#setDefaultNightMode-与setLocalNightMode-区别" class="headerlink" title="setDefaultNightMode()与setLocalNightMode()区别"></a>setDefaultNightMode()与setLocalNightMode()区别</h2><p>AppCompatDelegate.setDefaultNightMode()是对整个App中theme为DayNight主题生效<br>getDelegate().setLocalNightMode()只对特定的组件生效</p>
<h2 id="夜间资源"><a href="#夜间资源" class="headerlink" title="夜间资源"></a>夜间资源</h2><p>把夜晚主题的color等资源放在values-night中，程序在运行时就会自动调用</p>
<h2 id="获取应用当前的主题"><a href="#获取应用当前的主题" class="headerlink" title="获取应用当前的主题"></a>获取应用当前的主题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> currentNightMode = getResources().getConfiguration().uiMode</div><div class="line">        &amp; Configuration.UI_MODE_NIGHT_MASK;</div><div class="line"><span class="keyword">switch</span> (currentNightMode) &#123;</div><div class="line">    <span class="keyword">case</span> Configuration.UI_MODE_NIGHT_NO:</div><div class="line">        <span class="comment">// Night mode is not active, we're in day time</span></div><div class="line">    <span class="keyword">case</span> Configuration.UI_MODE_NIGHT_YES:</div><div class="line">        <span class="comment">// Night mode is active, we're at night!</span></div><div class="line">    <span class="keyword">case</span> Configuration.UI_MODE_NIGHT_UNDEFINED:</div><div class="line">        <span class="comment">// We don't know what mode we're in, assume notnight</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果切换了主题，本想通过这个方法，下次启动程序的时候，来设置。发现并没有记住这个值，还是只能SharedPreference读取，然后根据用户设置，调用 setDefaultNightMode() 方法。</p>
<h2 id="适配文字图片"><a href="#适配文字图片" class="headerlink" title="适配文字图片"></a>适配文字图片</h2><p>尽可能的使用主题属性（theme attributes）</p>
<ul>
<li><p>android:textColor=”?android:attr/textColorPrimary” 或者android:textColor=”?android:textColorPrimary”<br>系统默认的文字颜色。在亮色（light）主题下，颜色接近黑色，在暗色（dark）主题下，颜色接近白色。</p>
</li>
<li><p>android:background=”?android:colorBackground”<br>系统默认的背景颜色</p>
</li>
<li><p>?attr/colorControlNormal. 系统默认的图标颜色</p>
</li>
</ul>
<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://github.com/WuXiaolong/DesignSupportLibrarySample" target="_blank" rel="external">https://github.com/WuXiaolong/DesignSupportLibrarySample</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;夜间模式实现方式&lt;br&gt;1、通过切换theme来实现夜间模式。&lt;br&gt;优点：可以匹配多套主题，并不局限于黑白模式&lt;br&gt;缺点：需要大量定义主题&lt;br&gt;详见博客：&lt;a href=&quot;http://wuxiaolong.me/2015/08/19/ChangeTheme/&quot;&gt;http://wuxiaolong.me/2015/08/19/ChangeTheme/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、通过修改uiMode来切换夜间模式。&lt;br&gt;修改uimode是修改Configuration，这种主题切换只限于黑白模式，没有其他模式，不需要大量定义主题，即本文介绍的内容。&lt;/p&gt;
&lt;h1 id=&quot;效果预览&quot;&gt;&lt;a href=&quot;#效果预览&quot; class=&quot;headerlink&quot; title=&quot;效果预览&quot;&gt;&lt;/a&gt;效果预览&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7q5c2h.com1.z0.glb.clouddn.com/nightTheme.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SupportLibrary" scheme="http://wuxiaolong.me/categories/SupportLibrary/"/>
    
    
      <category term="NightTheme" scheme="http://wuxiaolong.me/tags/NightTheme/"/>
    
  </entry>
  
  <entry>
    <title>uCrop使用及源码浅析</title>
    <link href="http://wuxiaolong.me/2016/06/20/uCrop/"/>
    <id>http://wuxiaolong.me/2016/06/20/uCrop/</id>
    <published>2016-06-20T00:52:32.000Z</published>
    <updated>2016-08-25T11:38:52.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uCrop使用"><a href="#uCrop使用" class="headerlink" title="uCrop使用"></a>uCrop使用</h1><h2 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h2><p><a href="https://github.com/Yalantis/uCrop" target="_blank" rel="external">https://github.com/Yalantis/uCrop</a><br>然后clone或下载到本地，运行之。</p>
<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/ucrop0.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<a id="more"></a>
<h2 id="app-build-gradle"><a href="#app-build-gradle" class="headerlink" title="app/build.gradle"></a>app/build.gradle</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.yalantis:ucrop:1.5.0'</span></div></pre></td></tr></table></figure>
<h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">    android:name=<span class="string">"com.yalantis.ucrop.UCropActivity"</span></div><div class="line">    android:screenOrientation=<span class="string">"portrait"</span></div><div class="line">    android:theme=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span> /&gt;</div></pre></td></tr></table></figure>
<p>这里theme可以改成自己的</p>
<h2 id="配置uCrop"><a href="#配置uCrop" class="headerlink" title="配置uCrop"></a>配置uCrop</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">  * 启动裁剪</div><div class="line">  * <span class="doctag">@param</span> activity 上下文</div><div class="line">  * <span class="doctag">@param</span> sourceFilePath 需要裁剪图片的绝对路径</div><div class="line">  * <span class="doctag">@param</span> requestCode 比如：UCrop.REQUEST_CROP</div><div class="line">  * <span class="doctag">@param</span> aspectRatioX 裁剪图片宽高比</div><div class="line">  * <span class="doctag">@param</span> aspectRatioY 裁剪图片宽高比</div><div class="line">  * <span class="doctag">@return</span></div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">startUCrop</span><span class="params">(Activity activity, String sourceFilePath, </span></span></div><div class="line">	<span class="keyword">int</span> requestCode, <span class="keyword">float</span> aspectRatioX, <span class="keyword">float</span> aspectRatioY) &#123;</div><div class="line">    Uri sourceUri = Uri.fromFile(<span class="keyword">new</span> File(sourceFilePath));</div><div class="line">    File outDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);</div><div class="line">    <span class="keyword">if</span> (!outDir.exists()) &#123;</div><div class="line">        outDir.mkdirs();</div><div class="line">    &#125;</div><div class="line">    File outFile = <span class="keyword">new</span> File(outDir, System.currentTimeMillis() + <span class="string">".jpg"</span>);</div><div class="line">    <span class="comment">//裁剪后图片的绝对路径</span></div><div class="line">    String cameraScalePath = outFile.getAbsolutePath();</div><div class="line">    Uri destinationUri = Uri.fromFile(outFile);</div><div class="line">    <span class="comment">//初始化，第一个参数：需要裁剪的图片；第二个参数：裁剪后图片</span></div><div class="line">    UCrop uCrop = UCrop.of(sourceUri, destinationUri);</div><div class="line">    <span class="comment">//初始化UCrop配置</span></div><div class="line">    UCrop.Options options = <span class="keyword">new</span> UCrop.Options();</div><div class="line">    <span class="comment">//设置裁剪图片可操作的手势</span></div><div class="line">    options.setAllowedGestures(UCropActivity.SCALE, UCropActivity.ROTATE, UCropActivity.ALL);</div><div class="line">    <span class="comment">//是否隐藏底部容器，默认显示</span></div><div class="line">    options.setHideBottomControls(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">//设置toolbar颜色</span></div><div class="line">    options.setToolbarColor(ActivityCompat.getColor(activity, R.color.colorPrimary));</div><div class="line">    <span class="comment">//设置状态栏颜色</span></div><div class="line">    options.setStatusBarColor(ActivityCompat.getColor(activity, R.color.colorPrimary));</div><div class="line">    <span class="comment">//是否能调整裁剪框</span></div><div class="line">    options.setFreeStyleCropEnabled(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">//UCrop配置</span></div><div class="line">    uCrop.withOptions(options);</div><div class="line">    <span class="comment">//设置裁剪图片的宽高比，比如16：9</span></div><div class="line">    uCrop.withAspectRatio(aspectRatioX, aspectRatioY);</div><div class="line">    <span class="comment">//uCrop.useSourceImageAspectRatio();</span></div><div class="line">    <span class="comment">//跳转裁剪页面</span></div><div class="line">    uCrop.start(activity, requestCode);</div><div class="line">    <span class="keyword">return</span> cameraScalePath;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置Toolbar标题</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setToolbarTitle</span><span class="params">(@Nullable String text)</span></span></div><div class="line"><span class="comment">//设置裁剪的图片格式</span></div><div class="line"><span class="keyword">void</span> <span class="title">setCompressionFormat</span><span class="params">(@NonNull Bitmap.CompressFormat format)</span></div><div class="line"><span class="comment">//设置裁剪的图片质量，取值0-100</span></div><div class="line"><span class="keyword">void</span> <span class="title">setCompressionQuality</span><span class="params">(@IntRange(from = <span class="number">0</span>)</span> <span class="keyword">int</span> compressQuality)</div><div class="line"><span class="comment">//设置最多缩放的比例尺</span></div><div class="line"><span class="keyword">void</span> <span class="title">setMaxScaleMultiplier</span><span class="params">(@FloatRange(from = <span class="number">1.0</span>, fromInclusive = <span class="keyword">false</span>)</span> <span class="keyword">float</span> maxScaleMultiplier)</div><div class="line"><span class="comment">//动画时间</span></div><div class="line"><span class="keyword">void</span> <span class="title">setImageToCropBoundsAnimDuration</span><span class="params">(@IntRange(from = <span class="number">100</span>)</span> <span class="keyword">int</span> durationMillis)</div><div class="line"><span class="comment">//设置图片压缩最大值</span></div><div class="line"><span class="keyword">void</span> <span class="title">setMaxBitmapSize</span><span class="params">(@IntRange(from = <span class="number">100</span>)</span> <span class="keyword">int</span> maxBitmapSize)</div><div class="line"><span class="comment">//是否显示椭圆裁剪框阴影</span></div><div class="line"><span class="keyword">void</span> <span class="title">setOvalDimmedLayer</span><span class="params">(<span class="keyword">boolean</span> isOval)</span> </div><div class="line"><span class="comment">//设置椭圆裁剪框阴影颜色</span></div><div class="line"><span class="keyword">void</span> <span class="title">setDimmedLayerColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span></div><div class="line"><span class="comment">//是否显示裁剪框</span></div><div class="line"><span class="keyword">void</span> <span class="title">setShowCropFrame</span><span class="params">(<span class="keyword">boolean</span> show)</span></div><div class="line"><span class="comment">//设置裁剪框边的宽度</span></div><div class="line"><span class="keyword">void</span> <span class="title">setCropFrameStrokeWidth</span><span class="params">(@IntRange(from = <span class="number">0</span>)</span> <span class="keyword">int</span> width)</div><div class="line"><span class="comment">//是否显示裁剪框网格</span></div><div class="line"><span class="keyword">void</span> <span class="title">setShowCropGrid</span><span class="params">(<span class="keyword">boolean</span> show)</span> </div><div class="line"><span class="comment">//设置裁剪框网格颜色</span></div><div class="line"><span class="keyword">void</span> <span class="title">setCropGridColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span></div><div class="line"><span class="comment">//设置裁剪框网格宽</span></div><div class="line"><span class="keyword">void</span> <span class="title">setCropGridStrokeWidth</span><span class="params">(@IntRange(from = <span class="number">0</span>)</span> <span class="keyword">int</span> width)</div></pre></td></tr></table></figure>
<h2 id="onActivityResult"><a href="#onActivityResult" class="headerlink" title="onActivityResult"></a>onActivityResult</h2><p>经过裁剪，返回结果，这里我一般只需要裁剪后的图片绝对路径（调用上面startUCrop，即返回图片路径），然后调接口上传服务器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (resultCode == RESULT_OK &amp;&amp; requestCode == UCrop.REQUEST_CROP) &#123;</div><div class="line">        <span class="keyword">final</span> Uri resultUri = UCrop.getOutput(data);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resultCode == UCrop.RESULT_ERROR) &#123;</div><div class="line">        <span class="keyword">final</span> Throwable cropError = UCrop.getError(data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="uCrop源码浅析"><a href="#uCrop源码浅析" class="headerlink" title="uCrop源码浅析"></a>uCrop源码浅析</h1><p>uCrop源码能学习的东西有很多，比如左右滑的标尺，不过我们这里源码浅析只关注裁剪部分。</p>
<h2 id="类关系"><a href="#类关系" class="headerlink" title="类关系"></a>类关系</h2><p>首先有个大概了解：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/ucrop1.jpg?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>GestureCropImageView：负责监听各种手势<br>CropImageView：主要完成图片裁剪工作，和判断裁剪图片是否充满裁剪框<br>TransformImageView：负责图片旋转、缩放、位移操作</p>
<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>由上面的效果图可知，点击右上角，调用裁剪操作，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (item.getItemId() == R.id.menu_crop) &#123;</div><div class="line">        cropAndSaveImage();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">//裁剪和保存图片</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cropAndSaveImage</span><span class="params">()</span> </span>&#123;</div><div class="line">	……</div><div class="line">    mGestureCropImageView.cropAndSaveImage(mCompressFormat, mCompressQuality, <span class="keyword">new</span> BitmapCropCallback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBitmapCropped</span><span class="params">(@NonNull Uri resultUri)</span> </span>&#123;</div><div class="line">            setResultUri(resultUri, mGestureCropImageView.getTargetAspectRatio());</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCropFailure</span><span class="params">(@NonNull Throwable t)</span> </span>&#123;</div><div class="line">            setResultError(t);</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里调用了GestureCropImageView&amp;cropAndSaveImage方法，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> compressFormat  图片压缩格式</div><div class="line"> * <span class="doctag">@param</span> compressQuality 图片压缩质量</div><div class="line"> * <span class="doctag">@param</span> cropCallback    图片压缩回调</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cropAndSaveImage</span><span class="params">(@NonNull Bitmap.CompressFormat compressFormat, <span class="keyword">int</span> 											compressQuality,@Nullable BitmapCropCallback cropCallback)</span> </span>&#123;</div><div class="line">    <span class="comment">//取消所有动画</span></div><div class="line">    cancelAllAnimations();</div><div class="line">    <span class="comment">//判断裁剪图片是否充满裁剪框</span></div><div class="line">    setImageToWrapCropBounds(<span class="keyword">false</span>);</div><div class="line">    <span class="comment">//进行裁剪</span></div><div class="line">    <span class="keyword">new</span> BitmapCropTask(getViewBitmap(), mCropRect, RectUtils.trapToRect(mCurrentImageCorners),</div><div class="line">            getCurrentScale(), getCurrentAngle(),</div><div class="line">            mMaxResultImageSizeX, mMaxResultImageSizeY,</div><div class="line">            compressFormat, compressQuality,</div><div class="line">            getImageInputPath(), getImageOutputPath(),</div><div class="line">            cropCallback).execute();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="裁剪之前"><a href="#裁剪之前" class="headerlink" title="裁剪之前"></a>裁剪之前</h2><h3 id="setImageToWrapCropBounds"><a href="#setImageToWrapCropBounds" class="headerlink" title="setImageToWrapCropBounds"></a>setImageToWrapCropBounds</h3><p>裁剪之前，先判断裁剪图片是否充满裁剪框，如果没有，进行移动和缩放让其充满。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageToWrapCropBounds</span><span class="params">(<span class="keyword">boolean</span> animate)</span> </span>&#123;</div><div class="line">    <span class="comment">//mBitmapLaidOut图片加载OK，isImageWrapCropBounds()检查图片是否充满裁剪框</span></div><div class="line">    <span class="keyword">if</span> (mBitmapLaidOut &amp;&amp; !isImageWrapCropBounds()) &#123;</div><div class="line">        <span class="comment">//当前图片中心X点</span></div><div class="line">        <span class="keyword">float</span> currentX = mCurrentImageCenter[<span class="number">0</span>];</div><div class="line">        <span class="comment">//当前图片中心Y点</span></div><div class="line">        <span class="keyword">float</span> currentY = mCurrentImageCenter[<span class="number">1</span>];</div><div class="line">        <span class="comment">//当前图片缩放值</span></div><div class="line">        <span class="keyword">float</span> currentScale = getCurrentScale();</div><div class="line">        <span class="comment">//差量</span></div><div class="line">        <span class="keyword">float</span> deltaX = mCropRect.centerX() - currentX;</div><div class="line">        <span class="keyword">float</span> deltaY = mCropRect.centerY() - currentY;</div><div class="line">        <span class="keyword">float</span> deltaScale = <span class="number">0</span>;</div><div class="line">        <span class="comment">//临时矩阵重置</span></div><div class="line">        mTempMatrix.reset();</div><div class="line">        <span class="comment">//临时矩阵移动</span></div><div class="line">        mTempMatrix.setTranslate(deltaX, deltaY);</div><div class="line">        <span class="comment">//复制到新的数组</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span>[] tempCurrentImageCorners = Arrays.copyOf(mCurrentImageCorners, mCurrentImageCorners.length);</div><div class="line">        <span class="comment">//将此矩阵应用于二维点的数组，并编写转换后的指向数组的点</span></div><div class="line">        mTempMatrix.mapPoints(tempCurrentImageCorners);</div><div class="line">        <span class="comment">//再检查图片是否充满裁剪框</span></div><div class="line">        <span class="keyword">boolean</span> willImageWrapCropBoundsAfterTranslate = isImageWrapCropBounds(tempCurrentImageCorners);</div><div class="line">        <span class="keyword">if</span> (willImageWrapCropBoundsAfterTranslate) &#123;</div><div class="line">            <span class="comment">//图片缩进的数组</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span>[] imageIndents = calculateImageIndents();</div><div class="line">            deltaX = -(imageIndents[<span class="number">0</span>] + imageIndents[<span class="number">2</span>]);</div><div class="line">            deltaY = -(imageIndents[<span class="number">1</span>] + imageIndents[<span class="number">3</span>]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            RectF tempCropRect = <span class="keyword">new</span> RectF(mCropRect);</div><div class="line">            mTempMatrix.reset();</div><div class="line">            mTempMatrix.setRotate(getCurrentAngle());</div><div class="line">            mTempMatrix.mapRect(tempCropRect);</div><div class="line">            <span class="comment">//获取裁剪图片的边</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span>[] currentImageSides = RectUtils.getRectSidesFromCorners(mCurrentImageCorners);</div><div class="line">            deltaScale = Math.max(tempCropRect.width() / currentImageSides[<span class="number">0</span>],</div><div class="line">                    tempCropRect.height() / currentImageSides[<span class="number">1</span>]);</div><div class="line">            deltaScale = deltaScale * currentScale - currentScale;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (animate) &#123;</div><div class="line">            <span class="comment">//移动或缩放图片（有动画效果）</span></div><div class="line">            post(mWrapCropBoundsRunnable = <span class="keyword">new</span> WrapCropBoundsRunnable(</div><div class="line">                    CropImageView.<span class="keyword">this</span>, mImageToWrapCropBoundsAnimDuration, currentX, currentY, deltaX, deltaY,</div><div class="line">                    currentScale, deltaScale, willImageWrapCropBoundsAfterTranslate));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//移动图片</span></div><div class="line">            postTranslate(deltaX, deltaY);</div><div class="line">            <span class="keyword">if</span> (!willImageWrapCropBoundsAfterTranslate) &#123;</div><div class="line">                <span class="comment">//缩放图片</span></div><div class="line">                zoomInImage(currentScale + deltaScale, mCropRect.centerX(), mCropRect.centerY());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="进行裁剪"><a href="#进行裁剪" class="headerlink" title="进行裁剪"></a>进行裁剪</h2><p>裁剪放到了异步，即BitmapCropTask继承AsyncTask，先设置原始图片resizeScale值，然后通过ExifInterface保存新的图片，即裁剪后的图片。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapCropTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Throwable</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	……</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> viewBitmap          裁剪图片bitmap</div><div class="line">     * <span class="doctag">@param</span> cropRect            裁剪矩形</div><div class="line">     * <span class="doctag">@param</span> currentImageRect    当前图片矩形</div><div class="line">     * <span class="doctag">@param</span> currentScale        当前图片缩放值</div><div class="line">     * <span class="doctag">@param</span> currentAngle        当前图片角度</div><div class="line">     * <span class="doctag">@param</span> maxResultImageSizeX 图片裁剪后最大宽值</div><div class="line">     * <span class="doctag">@param</span> maxResultImageSizeY 图片裁剪后最大高值</div><div class="line">     * <span class="doctag">@param</span> compressFormat      图片裁剪的格式</div><div class="line">     * <span class="doctag">@param</span> compressQuality     图片裁剪的质量</div><div class="line">     * <span class="doctag">@param</span> imageInputPath      裁剪图片路径</div><div class="line">     * <span class="doctag">@param</span> imageOutputPath     图片裁剪后路径</div><div class="line">     * <span class="doctag">@param</span> cropCallback        裁剪回调</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitmapCropTask</span><span class="params">(@Nullable Bitmap viewBitmap,</span></span></div><div class="line">                          @NonNull RectF cropRect, @NonNull RectF currentImageRect,</div><div class="line">                          <span class="keyword">float</span> currentScale, <span class="keyword">float</span> currentAngle,</div><div class="line">                          <span class="keyword">int</span> maxResultImageSizeX, <span class="keyword">int</span> maxResultImageSizeY,</div><div class="line">                          @NonNull Bitmap.CompressFormat compressFormat, <span class="keyword">int</span> compressQuality,</div><div class="line">                          @NonNull String imageInputPath, @NonNull String imageOutputPath,</div><div class="line">                          @Nullable BitmapCropCallback cropCallback) &#123;</div><div class="line"></div><div class="line">      ……</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Throwable <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mViewBitmap == <span class="keyword">null</span> || mViewBitmap.isRecycled()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NullPointerException(<span class="string">"ViewBitmap is null or already recycled"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mCurrentImageRect.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NullPointerException(<span class="string">"CurrentImageRect is empty"</span>);</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//设置resizeScale值</span></div><div class="line">        <span class="keyword">float</span> resizeScale = resize();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">	        <span class="comment">//裁剪</span></div><div class="line">            crop(resizeScale);</div><div class="line">            <span class="comment">//回收</span></div><div class="line">            mViewBitmap.recycle();</div><div class="line">            mViewBitmap = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">            <span class="keyword">return</span> throwable;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//初始Options</span></div><div class="line">        <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        <span class="comment">//查询该位图，而无需分配存储器，可获取outHeight(图片原始高度)和 outWidth(图片的原始宽度)</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//裁剪图片解码</span></div><div class="line">        BitmapFactory.decodeFile(mImageInputPath, options);</div><div class="line">        <span class="comment">//原始图片和裁剪后图片比值</span></div><div class="line">        <span class="keyword">float</span> scaleX = options.outWidth / mViewBitmap.getWidth();</div><div class="line">        <span class="keyword">float</span> scaleY = options.outHeight / mViewBitmap.getHeight();</div><div class="line"></div><div class="line">        <span class="keyword">float</span> resizeScale = Math.min(scaleX, scaleY);</div><div class="line"></div><div class="line">        mCurrentScale /= resizeScale;</div><div class="line">        <span class="comment">//初始化值为1</span></div><div class="line">        resizeScale = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (mMaxResultImageSizeX &gt; <span class="number">0</span> &amp;&amp; mMaxResultImageSizeY &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">float</span> cropWidth = mCropRect.width() / mCurrentScale;</div><div class="line">            <span class="keyword">float</span> cropHeight = mCropRect.height() / mCurrentScale;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (cropWidth &gt; mMaxResultImageSizeX || cropHeight &gt; mMaxResultImageSizeY) &#123;</div><div class="line"></div><div class="line">                scaleX = mMaxResultImageSizeX / cropWidth;</div><div class="line">                scaleY = mMaxResultImageSizeY / cropHeight;</div><div class="line">                <span class="comment">//设置resizeScale，如果是2就是高度和宽度都是原始的一半</span></div><div class="line">                resizeScale = Math.min(scaleX, scaleY);</div><div class="line"></div><div class="line">                mCurrentScale /= resizeScale;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> resizeScale;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">crop</span><span class="params">(<span class="keyword">float</span> resizeScale)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//ExifInterface这个接口提供了图片文件的旋转，gps，时间等信息，从原始图片读出Exif标签</span></div><div class="line">        ExifInterface originalExif = <span class="keyword">new</span> ExifInterface(mImageInputPath);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> top = Math.round((mCropRect.top - mCurrentImageRect.top) / mCurrentScale);</div><div class="line">        <span class="keyword">int</span> left = Math.round((mCropRect.left - mCurrentImageRect.left) / mCurrentScale);</div><div class="line">        <span class="keyword">int</span> width = Math.round(mCropRect.width() / mCurrentScale);</div><div class="line">        <span class="keyword">int</span> height = Math.round(mCropRect.height() / mCurrentScale);</div><div class="line">		<span class="comment">//复制图片</span></div><div class="line">        <span class="keyword">boolean</span> cropped = cropCImg(mImageInputPath, mImageOutputPath,</div><div class="line">                left, top, width, height, mCurrentAngle, resizeScale,</div><div class="line">                mCompressFormat.ordinal(), mCompressQuality);</div><div class="line">        <span class="keyword">if</span> (cropped) &#123;</div><div class="line">	        <span class="comment">//拿到裁剪后图片</span></div><div class="line">            copyExif(originalExif, width, height);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> cropped;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"JniMissingFunction"</span>)</div><div class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cropCImg</span><span class="params">(String inputPath, String outputPath,</span></span></div><div class="line">                                   <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">float</span> angle, <span class="keyword">float</span> resizeScale,</div><div class="line">                                   <span class="keyword">int</span> format, <span class="keyword">int</span> quality) <span class="keyword">throws</span> IOException, OutOfMemoryError;</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@param</span> originalExif 原始图片Exif</div><div class="line">	 * <span class="doctag">@param</span> width        裁剪后图片宽</div><div class="line">	 * <span class="doctag">@param</span> height       裁剪后图片高</div><div class="line">	 * <span class="doctag">@throws</span> IOException 是否异常</div><div class="line">	 */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyExif</span><span class="params">(ExifInterface originalExif, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//Exif标签数组</span></div><div class="line">        String[] attributes = <span class="keyword">new</span> String[]&#123;</div><div class="line">                ExifInterface.TAG_APERTURE,</div><div class="line">                ……</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">//指定裁剪后图片路径，初始化新的ExifInterface</span></div><div class="line">        ExifInterface newExif = <span class="keyword">new</span> ExifInterface(mImageOutputPath);</div><div class="line">        String value;</div><div class="line">        <span class="keyword">for</span> (String attribute : attributes) &#123;</div><div class="line">            value = originalExif.getAttribute(attribute);</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(value)) &#123;</div><div class="line">                <span class="comment">//设置Exif标签</span></div><div class="line">                newExif.setAttribute(attribute, value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        newExif.setAttribute(ExifInterface.TAG_IMAGE_WIDTH, String.valueOf(width));</div><div class="line">        newExif.setAttribute(ExifInterface.TAG_IMAGE_LENGTH, String.valueOf(height));</div><div class="line">        newExif.setAttribute(ExifInterface.TAG_ORIENTATION, <span class="string">"0"</span>);</div><div class="line">        <span class="comment">//保存</span></div><div class="line">        newExif.saveAttributes();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(@Nullable Throwable t)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCropCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//接口回调，over</span></div><div class="line">                mCropCallback.onBitmapCropped(Uri.fromFile(<span class="keyword">new</span> File(mImageOutputPath)));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mCropCallback.onCropFailure(t);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>uCrop功能强大，对于我来说，有很多东西值得学习，难点如Rect包含问题（其实这块还不是很理解），新知识如ExifInterface操作图片，BitmapFactory显示图片的知识点温故等，还有自定义左右滑的标尺，都是不错的学习源码。抛砖引玉至此，over。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;uCrop使用&quot;&gt;&lt;a href=&quot;#uCrop使用&quot; class=&quot;headerlink&quot; title=&quot;uCrop使用&quot;&gt;&lt;/a&gt;uCrop使用&lt;/h1&gt;&lt;h2 id=&quot;github地址&quot;&gt;&lt;a href=&quot;#github地址&quot; class=&quot;headerlink&quot; title=&quot;github地址&quot;&gt;&lt;/a&gt;github地址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Yalantis/uCrop&quot;&gt;https://github.com/Yalantis/uCrop&lt;/a&gt;&lt;br&gt;然后clone或下载到本地，运行之。&lt;/p&gt;
&lt;h2 id=&quot;效果预览&quot;&gt;&lt;a href=&quot;#效果预览&quot; class=&quot;headerlink&quot; title=&quot;效果预览&quot;&gt;&lt;/a&gt;效果预览&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7q5c2h.com1.z0.glb.clouddn.com/ucrop0.gif?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SourceAnalysis" scheme="http://wuxiaolong.me/categories/SourceAnalysis/"/>
    
    
      <category term="uCrop" scheme="http://wuxiaolong.me/tags/uCrop/"/>
    
  </entry>
  
  <entry>
    <title>Android Retrofit 2.0 使用-补充篇</title>
    <link href="http://wuxiaolong.me/2016/06/18/retrofits/"/>
    <id>http://wuxiaolong.me/2016/06/18/retrofits/</id>
    <published>2016-06-18T00:48:53.000Z</published>
    <updated>2016-08-25T11:38:52.953Z</updated>
    
    <content type="html"><![CDATA[<p>推荐阅读，猛戳：<br>1、<a href="http://wuxiaolong.me/2015/09/23/AndroidMVPSample/">Android MVP 实例</a><br>2、<a href="http://wuxiaolong.me/2016/01/15/retrofit/">Android Retrofit 2.0使用</a><br>3、<a href="http://wuxiaolong.me/2016/01/18/rxjava/">RxJava</a><br>4、<a href="http://wuxiaolong.me/2016/04/07/rxbus/">RxBus</a><br>5、<a href="http://wuxiaolong.me/2016/06/12/mvpRetrofitRxjava/">Android MVP+Retrofit+RxJava实践小结</a></p>
<blockquote>
<p>之前分享的<a href="http://wuxiaolong.me/2016/01/15/retrofit/">Android Retrofit 2.0 使用</a>，属于基本的使用，实际开发还远远不够，因此对其补充，主要在Retrofit配置和接口参数。</p>
</blockquote>
<a id="more"></a>
<h1 id="Retrofit配置"><a href="#Retrofit配置" class="headerlink" title="Retrofit配置"></a>Retrofit配置</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>app/build.gradle<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.0.2'</span></div></pre></td></tr></table></figure></p>
<p>首先Builder()，得到OkHttpClient.Builder对象builder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div></pre></td></tr></table></figure></p>
<h2 id="Log信息拦截器"><a href="#Log信息拦截器" class="headerlink" title="Log信息拦截器"></a>Log信息拦截器</h2><p>Debug可以看到，网络请求，打印Log信息，发布的时候就不需要这些log<br>1、添加依赖<br>app/build.gradle<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.1.2'</span></div></pre></td></tr></table></figure></p>
<p>2、Log信息拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">    <span class="comment">// Log信息拦截器</span></div><div class="line">    HttpLoggingInterceptor loggingInterceptor = <span class="keyword">new</span> HttpLoggingInterceptor();</div><div class="line">    loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class="line">    <span class="comment">//设置 Debug Log 模式</span></div><div class="line">    builder.addInterceptor(loggingInterceptor);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p>无网络时，也能显示数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">File cacheFile = <span class="keyword">new</span> File(DemoApplication.getContext().getExternalCacheDir(), <span class="string">"WuXiaolongCache"</span>);</div><div class="line">Cache cache = <span class="keyword">new</span> Cache(cacheFile, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span>);</div><div class="line">Interceptor cacheInterceptor = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request request = chain.request();</div><div class="line">        <span class="keyword">if</span> (!AppUtils.networkIsAvailable(DemoApplication.getContext())) &#123;</div><div class="line">            request = request.newBuilder()</div><div class="line">                    .cacheControl(CacheControl.FORCE_CACHE)</div><div class="line">                    .build();</div><div class="line">        &#125;</div><div class="line">        Response response = chain.proceed(request);</div><div class="line">        <span class="keyword">if</span> (AppUtils.networkIsAvailable(DemoApplication.getContext())) &#123;</div><div class="line">            <span class="keyword">int</span> maxAge = <span class="number">0</span>;</div><div class="line">            <span class="comment">// 有网络时 设置缓存超时时间0个小时</span></div><div class="line">            response.newBuilder()</div><div class="line">                    .header(<span class="string">"Cache-Control"</span>, <span class="string">"public, max-age="</span> + maxAge)</div><div class="line">                    .removeHeader(<span class="string">"WuXiaolong"</span>)<span class="comment">// 清除头信息，因为服务器如果不支持，会返回一些干扰信息，不清除下面无法生效</span></div><div class="line">                    .build();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 无网络时，设置超时为4周</span></div><div class="line">            <span class="keyword">int</span> maxStale = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">28</span>;</div><div class="line">            response.newBuilder()</div><div class="line">                    .header(<span class="string">"Cache-Control"</span>, <span class="string">"public, only-if-cached, max-stale="</span> + maxStale)</div><div class="line">                    .removeHeader(<span class="string">"nyn"</span>)</div><div class="line">                    .build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">builder.cache(cache).addInterceptor(cacheInterceptor);</div></pre></td></tr></table></figure></p>
<h2 id="公共参数"><a href="#公共参数" class="headerlink" title="公共参数"></a>公共参数</h2><p>可能接口有某些参数是公共的，不可能一个个接口都去加吧<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//公共参数</span></div><div class="line">Interceptor addQueryParameterInterceptor = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request originalRequest = chain.request();</div><div class="line">        Request request;</div><div class="line">        String method = originalRequest.method();</div><div class="line">        Headers headers = originalRequest.headers();</div><div class="line">        HttpUrl modifiedUrl = originalRequest.url().newBuilder()</div><div class="line">                <span class="comment">// Provide your custom parameter here</span></div><div class="line">                .addQueryParameter(<span class="string">"platform"</span>, <span class="string">"android"</span>)</div><div class="line">                .addQueryParameter(<span class="string">"version"</span>, <span class="string">"1.0.0"</span>)              </div><div class="line">                .build();</div><div class="line">        request = originalRequest.newBuilder().url(modifiedUrl).build();</div><div class="line">        <span class="keyword">return</span> chain.proceed(request);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//公共参数</span></div><div class="line">builder.addInterceptor(addQueryParameterInterceptor);</div></pre></td></tr></table></figure></p>
<h2 id="设置头"><a href="#设置头" class="headerlink" title="设置头"></a>设置头</h2><p>有的接口可能对请求头要设置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Interceptor headerInterceptor = <span class="keyword">new</span> Interceptor() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request originalRequest = chain.request();</div><div class="line">        Request.Builder requestBuilder = originalRequest.newBuilder()</div><div class="line">                .header(<span class="string">"AppType"</span>, <span class="string">"TPOS"</span>)</div><div class="line">                .header(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</div><div class="line">                .header(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>)</div><div class="line">                .method(originalRequest.method(), originalRequest.body());</div><div class="line">        Request request = requestBuilder.build();</div><div class="line">        <span class="keyword">return</span> chain.proceed(request);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//设置头</span></div><div class="line">builder.addInterceptor(headerInterceptor );</div></pre></td></tr></table></figure></p>
<h2 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h2><p>服务端可能需要保持请求是同一个cookie，主要看各自需求<br>1、app/build.gradle<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.okhttp3:okhttp-urlconnection:3.2.0'</span></div></pre></td></tr></table></figure></p>
<p>2、设置cookie<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CookieManager cookieManager = <span class="keyword">new</span> CookieManager();</div><div class="line">cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);</div><div class="line">builder.cookieJar(<span class="keyword">new</span> JavaNetCookieJar(cookieManager));</div></pre></td></tr></table></figure></p>
<h2 id="设置超时和重连"><a href="#设置超时和重连" class="headerlink" title="设置超时和重连"></a>设置超时和重连</h2><p>希望超时时能重连<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置超时</span></div><div class="line">builder.connectTimeout(<span class="number">15</span>, TimeUnit.SECONDS);</div><div class="line">builder.readTimeout(<span class="number">20</span>, TimeUnit.SECONDS);</div><div class="line">builder.writeTimeout(<span class="number">20</span>, TimeUnit.SECONDS);</div><div class="line"><span class="comment">//错误重连</span></div><div class="line">builder.retryOnConnectionFailure(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
<p>最后将这些配置设置给retrofit：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">OkHttpClient okHttpClient = builder.build();</div><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .baseUrl(ApiStores.API_SERVER_URL)</div><div class="line">        <span class="comment">//设置 Json 转换器</span></div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        <span class="comment">//RxJava 适配器</span></div><div class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class="line">        .client(okHttpClient)</div><div class="line">        .build();</div></pre></td></tr></table></figure></p>
<h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppClient</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Retrofit retrofit = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Retrofit <span class="title">retrofit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (retrofit == <span class="keyword">null</span>) &#123;</div><div class="line">	         OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line">            <span class="comment">/**</span></div><div class="line">             *设置缓存，代码略</div><div class="line">             */</div><div class="line">                      </div><div class="line">            <span class="comment">/**</span></div><div class="line">             *  公共参数，代码略</div><div class="line">             */</div><div class="line">           </div><div class="line">            <span class="comment">/**</span></div><div class="line">             * 设置头，代码略</div><div class="line">             */           </div><div class="line">           </div><div class="line">			 <span class="comment">/**</span></div><div class="line">             * Log信息拦截器，代码略</div><div class="line">             */</div><div class="line">            </div><div class="line">			 <span class="comment">/**</span></div><div class="line">             * 设置cookie，代码略</div><div class="line">             */</div><div class="line">            </div><div class="line">             <span class="comment">/**</span></div><div class="line">             * 设置超时和重连，代码略</div><div class="line">             */</div><div class="line"></div><div class="line">            <span class="comment">//以上设置结束，才能build(),不然设置白搭</span></div><div class="line">            OkHttpClient okHttpClient = builder.build();</div><div class="line"></div><div class="line">            retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                    .baseUrl(ApiStores.API_SERVER_URL)                  </div><div class="line">                    .client(okHttpClient)</div><div class="line">                    .build();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> retrofit;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="接口参数"><a href="#接口参数" class="headerlink" title="接口参数"></a>接口参数</h1><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>类似这样链接：<a href="http://wuxiaolong.me/2016/01/15/retrofit/">http://wuxiaolong.me/2016/01/15/retrofit/</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"2016/01/15/&#123;retrofit&#125;"</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">getData</span><span class="params">(@Path(<span class="string">"retrofit"</span>)</span> String retrofit)</span>;</div></pre></td></tr></table></figure></p>
<p>即您传的参数retrofit内容会替换大括号里的内容。</p>
<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>类似这样链接：<a href="http://wuxiaolong.me/v1?ip=202.202.33.33&amp;name=WuXiaolong">http://wuxiaolong.me/v1?ip=202.202.33.33&amp;name=WuXiaolong</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"v1"</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">getData</span><span class="params">(@Query(<span class="string">"ip"</span>)</span> String ip,@<span class="title">Query</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</div></pre></td></tr></table></figure></p>
<h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><p>表单提交，如登录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FormUrlEncoded</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"v1/login"</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">userLogin</span><span class="params">(@Field(<span class="string">"phone"</span>)</span> String phone, @<span class="title">Field</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</div></pre></td></tr></table></figure></p>
<h2 id="传json格式"><a href="#传json格式" class="headerlink" title="传json格式"></a>传json格式</h2><p>如果参数是json格式，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;		</div><div class="line">    <span class="string">"apiInfo"</span>: &#123;		</div><div class="line">        <span class="string">"apiName"</span>: <span class="string">"WuXiaolong"</span>,		</div><div class="line">        <span class="string">"apiKey"</span>: <span class="string">"666"</span>		</div><div class="line">    &#125;		</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建立Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiInfo</span> </span>&#123;</div><div class="line">       <span class="keyword">private</span> ApiInfoBean apiInfo;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> ApiInfoBean <span class="title">getApiInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> apiInfo;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApiInfo</span><span class="params">(ApiInfoBean apiInfo)</span> </span>&#123;</div><div class="line">           <span class="keyword">this</span>.apiInfo = apiInfo;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiInfoBean</span> </span>&#123;</div><div class="line">           <span class="keyword">private</span> String apiName;</div><div class="line">           <span class="keyword">private</span> String apiKey;</div><div class="line">           <span class="comment">//省略get和set方法</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>ApiStores<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"client/shipper/getCarType"</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">getData</span><span class="params">(@Body ApiInfo apiInfo)</span></span>;</div><div class="line">```       </div><div class="line"></div><div class="line">代码调用</div><div class="line">```java</div><div class="line">ApiInfo apiInfo = <span class="keyword">new</span> ApiInfo();</div><div class="line">ApiInfo.ApiInfoBean apiInfoBean = apiInfo.new ApiInfoBean();</div><div class="line">apiInfoBean.setApiKey(<span class="string">"666"</span>);</div><div class="line">apiInfoBean.setApiName(<span class="string">"WuXiaolong"</span>);</div><div class="line">apiInfo.setApiInfo(apiInfoBean);</div><div class="line"><span class="comment">//调接口</span></div><div class="line">getData(apiInfo);</div></pre></td></tr></table></figure></p>
<h2 id="传数组"><a href="#传数组" class="headerlink" title="传数组"></a>传数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"v1/enterprise/find"</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">getData</span><span class="params">(@Query(<span class="string">"id"</span>)</span> String id, @<span class="title">Query</span><span class="params">(<span class="string">"linked[]"</span>)</span> String... linked)</span>;</div></pre></td></tr></table></figure>
<p>代码调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String id=<span class="string">"WuXiaolong"</span>；</div><div class="line">String[] s = <span class="keyword">new</span> String[]&#123;<span class="string">"WuXiaolong"</span>&#125;;</div><div class="line"><span class="comment">//调接口</span></div><div class="line">getData(id, s);</div></pre></td></tr></table></figure></p>
<h2 id="传文件-单个"><a href="#传文件-单个" class="headerlink" title="传文件-单个"></a>传文件-单个</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Multipart</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"v1/create"</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">create</span><span class="params">(@Part(<span class="string">"pictureName"</span>)</span> RequestBody pictureName,  @Part MultipartBody.Part picture)</span>;</div></pre></td></tr></table></figure>
<p>代码调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RequestBody pictureNameBody = RequestBody.create(MediaType.parse(AppConstants.CONTENT_TYPE_FILE), <span class="string">"pictureName"</span>);</div><div class="line">File picture= <span class="keyword">new</span> File(path);</div><div class="line">RequestBody requestFile = RequestBody.create(MediaType.parse(AppConstants.CONTENT_TYPE_FILE), picture);</div><div class="line"><span class="comment">// MultipartBody.Part is used to send also the actual file name</span></div><div class="line">MultipartBody.Part picturePart = MultipartBody.Part.createFormData(<span class="string">"picture"</span>, picture.getName(), requestFile);</div><div class="line"><span class="comment">//调接口</span></div><div class="line">create(pictureNameBody, picturePart);</div></pre></td></tr></table></figure></p>
<h2 id="传文件-多个"><a href="#传文件-多个" class="headerlink" title="传文件-多个"></a>传文件-多个</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Multipart</span></div><div class="line"><span class="meta">@POST</span>(<span class="string">"v1/create"</span>)</div><div class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">create</span><span class="params">(@Part(<span class="string">"pictureName"</span>)</span> RequestBody pictureName,   @PartMap Map&lt;String, RequestBody&gt; params)</span>;</div></pre></td></tr></table></figure>
<p>代码调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RequestBody pictureNameBody = RequestBody.create(MediaType.parse(AppConstants.CONTENT_TYPE_FILE), <span class="string">"pictureName"</span>);</div><div class="line">File picture= <span class="keyword">new</span> File(path);</div><div class="line">RequestBody requestFile = RequestBody.create(MediaType.parse(AppConstants.CONTENT_TYPE_FILE), picture);</div><div class="line">Map&lt;String, RequestBody&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">params.put(<span class="string">"picture\"; filename=\""</span> + picture.getName() + <span class="string">""</span>, requestFile);</div><div class="line"><span class="comment">//调接口</span></div><div class="line">create(pictureNameBody, params);</div></pre></td></tr></table></figure></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐阅读，猛戳：&lt;br&gt;1、&lt;a href=&quot;http://wuxiaolong.me/2015/09/23/AndroidMVPSample/&quot;&gt;Android MVP 实例&lt;/a&gt;&lt;br&gt;2、&lt;a href=&quot;http://wuxiaolong.me/2016/01/15/retrofit/&quot;&gt;Android Retrofit 2.0使用&lt;/a&gt;&lt;br&gt;3、&lt;a href=&quot;http://wuxiaolong.me/2016/01/18/rxjava/&quot;&gt;RxJava&lt;/a&gt;&lt;br&gt;4、&lt;a href=&quot;http://wuxiaolong.me/2016/04/07/rxbus/&quot;&gt;RxBus&lt;/a&gt;&lt;br&gt;5、&lt;a href=&quot;http://wuxiaolong.me/2016/06/12/mvpRetrofitRxjava/&quot;&gt;Android MVP+Retrofit+RxJava实践小结&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前分享的&lt;a href=&quot;http://wuxiaolong.me/2016/01/15/retrofit/&quot;&gt;Android Retrofit 2.0 使用&lt;/a&gt;，属于基本的使用，实际开发还远远不够，因此对其补充，主要在Retrofit配置和接口参数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Retrofit" scheme="http://wuxiaolong.me/categories/Retrofit/"/>
    
    
      <category term="Retrofit" scheme="http://wuxiaolong.me/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Android MVP+Retrofit+RxJava实践小结</title>
    <link href="http://wuxiaolong.me/2016/06/12/mvpRetrofitRxjava/"/>
    <id>http://wuxiaolong.me/2016/06/12/mvpRetrofitRxjava/</id>
    <published>2016-06-12T03:07:23.000Z</published>
    <updated>2016-08-25T11:38:52.950Z</updated>
    
    <content type="html"><![CDATA[<p>关于MVP、Retrofit、RxJava，之前已经分别做了分享，如果您还没有阅读过，可以猛戳：<br>1、<a href="http://wuxiaolong.me/2015/09/23/AndroidMVPSample/">Android MVP 实例</a><br>2、<a href="http://wuxiaolong.me/2016/01/15/retrofit/">Android Retrofit 2.0使用</a><br>3、<a href="http://wuxiaolong.me/2016/01/18/rxjava/">RxJava</a><br>4、<a href="http://wuxiaolong.me/2016/04/07/rxbus/">RxBus</a></p>
<p>假设，您对MVP、Retrofit、RxJava已经有了一点了解，那么我们开始本文：<br><a id="more"></a></p>
<h1 id="Android-MVP优化"><a href="#Android-MVP优化" class="headerlink" title="Android MVP优化"></a>Android MVP优化</h1><p>1、MVP绑定Activity（Fragment）生命周期<br>按照之前的文章，每个Presenter都得初始化和销毁，我新加MvpActivity(MvpFragment)，加了抽象方法<code>protected abstract P createPresenter();</code>这样做的目的在需要使用MVP的地方，可以继承MvpActivity(MvpFragment)，然后初始化和销毁就不用手动一个个去加了。</p>
<p>2、接口请求等还是放到MVP的P中<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/androidmvpsample2.png?watermark/2/text/5ZC05bCP6b6Z5ZCM5a24/font/5qW35L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>这个图片，在当时写MVP文章时给出的，实际开发中，我发现每个都这样写，实在是增加了不少代码，然接口请求放到P中，还有个好处，就是MVP绑定Activity（Fragment）生命周期，当onDestroy时取消RXJava注册，以避免内存泄露。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>如图，有个大致了解：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/mvpRetrofitRxjava1.jpg" alt=""><br>mvp：所有的mvp都放在这个包下<br>retrofit：Retrofit接口和配置文件<br>rxjava：RxJava一些回调设置<br>ui：Activity或fragment，建议按功能再细分包</p>
<h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>还是就贴出核心代码吧，源码在我的github上（<a href="https://github.com/WuXiaolong/AndroidMVPSample" target="_blank" rel="external">https://github.com/WuXiaolong/AndroidMVPSample</a>）。</p>
<p>MainActivity入口，还是演示的之前的MVP的天气的接口，接口请求方法放在Presenter。</p>
<h3 id="MvpActivity"><a href="#MvpActivity" class="headerlink" title="MvpActivity"></a>MvpActivity</h3><p>Presenter绑定Activity（Fragment）生命周期<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MvpActivity</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> P mvpPresenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        mvpPresenter = createPresenter();</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> P <span class="title">createPresenter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (mvpPresenter != <span class="keyword">null</span>) &#123;</div><div class="line">            mvpPresenter.detachView();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="MainPresenter"><a href="#MainPresenter" class="headerlink" title="MainPresenter"></a>MainPresenter</h3><p>apiStores.loadData方法是Retrofit做的网络请求，回调是RxJava完成的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">MainView</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(MainView view)</span> </span>&#123;</div><div class="line">        attachView(view);</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">(String cityId)</span> </span>&#123;</div><div class="line">        mvpView.showLoading();</div><div class="line">        addSubscription(apiStores.loadData(cityId),</div><div class="line">                <span class="keyword">new</span> SubscriberCallBack&lt;&gt;(<span class="keyword">new</span> ApiCallback&lt;MainModel&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(MainModel model)</span> </span>&#123;</div><div class="line">                        mvpView.getDataSuccess(model);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</div><div class="line">                        mvpView.getDataFail(msg);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                        mvpView.hideLoading();</div><div class="line">                    &#125;</div><div class="line">                &#125;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="apiStores-loadData"><a href="#apiStores-loadData" class="headerlink" title="apiStores.loadData"></a>apiStores.loadData</h3><p>是不是很简单，关于Retrofit配置，详见源码AppClient。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApiStores</span> </span>&#123;</div><div class="line">    <span class="comment">//baseUrl</span></div><div class="line">    String API_SERVER_URL = <span class="string">"http://www.weather.com.cn/"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//加载天气</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"adat/sk/&#123;cityId&#125;.html"</span>)</div><div class="line">    <span class="function">Observable&lt;MainModel&gt; <span class="title">loadData</span><span class="params">(@Path(<span class="string">"cityId"</span>)</span> String cityId)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="RxJava回调方法"><a href="#RxJava回调方法" class="headerlink" title="RxJava回调方法"></a>RxJava回调方法</h3><p>这里onError，写了如果网络请求用httpcode来判断。当然可以不要。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscriberCallBack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> ApiCallback&lt;T&gt; apiCallback;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubscriberCallBack</span><span class="params">(ApiCallback&lt;T&gt; apiCallback)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.apiCallback = apiCallback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        apiCallback.onCompleted();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HttpException) &#123;</div><div class="line">            HttpException httpException = (HttpException) e;</div><div class="line">            <span class="comment">//httpException.response().errorBody().string()</span></div><div class="line">            <span class="keyword">int</span> code = httpException.code();</div><div class="line">            String msg = httpException.getMessage();</div><div class="line">            <span class="keyword">if</span> (code == <span class="number">504</span>) &#123;</div><div class="line">                msg = <span class="string">"网络不给力"</span>;</div><div class="line">            &#125;</div><div class="line">            apiCallback.onFailure(code, msg);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            apiCallback.onFailure(<span class="number">0</span>, e.getMessage());</div><div class="line">        &#125;</div><div class="line">        apiCallback.onCompleted();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        apiCallback.onSuccess(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="BasePresenter"><a href="#BasePresenter" class="headerlink" title="BasePresenter"></a>BasePresenter</h3><p>再来看看BasePresenter，这里做了Presenter初始化和销毁(包括RXjava取消注册)，调用在MvpActivity。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Presenter</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">public</span> V mvpView;</div><div class="line">    <span class="keyword">public</span> ApiStores apiStores = AppClient.retrofit().create(ApiStores.class);</div><div class="line">    <span class="keyword">private</span> CompositeSubscription mCompositeSubscription;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(V mvpView)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mvpView = mvpView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mvpView = <span class="keyword">null</span>;</div><div class="line">        onUnsubscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//RXjava取消注册，以避免内存泄露</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUnsubscribe</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription != <span class="keyword">null</span> &amp;&amp; mCompositeSubscription.hasSubscriptions()) &#123;</div><div class="line">            mCompositeSubscription.unsubscribe();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSubscription</span><span class="params">(Observable observable, Subscriber subscriber)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeSubscription == <span class="keyword">null</span>) &#123;</div><div class="line">            mCompositeSubscription = <span class="keyword">new</span> CompositeSubscription();</div><div class="line">        &#125;</div><div class="line">        mCompositeSubscription.add(observable</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(subscriber));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h1><p><a href="https://github.com/WuXiaolong/AndroidMVPSample" target="_blank" rel="external">https://github.com/WuXiaolong/AndroidMVPSample</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>三者结合使用，重点还是对MVP的优化，Retrofit只贴出最简单的（后续会写Retrofit详情使用），Rxjava可能我是对它认识尚浅，实际运用最多还是RxBus。</p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于MVP、Retrofit、RxJava，之前已经分别做了分享，如果您还没有阅读过，可以猛戳：&lt;br&gt;1、&lt;a href=&quot;http://wuxiaolong.me/2015/09/23/AndroidMVPSample/&quot;&gt;Android MVP 实例&lt;/a&gt;&lt;br&gt;2、&lt;a href=&quot;http://wuxiaolong.me/2016/01/15/retrofit/&quot;&gt;Android Retrofit 2.0使用&lt;/a&gt;&lt;br&gt;3、&lt;a href=&quot;http://wuxiaolong.me/2016/01/18/rxjava/&quot;&gt;RxJava&lt;/a&gt;&lt;br&gt;4、&lt;a href=&quot;http://wuxiaolong.me/2016/04/07/rxbus/&quot;&gt;RxBus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设，您对MVP、Retrofit、RxJava已经有了一点了解，那么我们开始本文：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://wuxiaolong.me/categories/Android/"/>
    
    
      <category term="MVP" scheme="http://wuxiaolong.me/tags/MVP/"/>
    
      <category term="Retrofit" scheme="http://wuxiaolong.me/tags/Retrofit/"/>
    
      <category term="RxJava" scheme="http://wuxiaolong.me/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android调用系统相机和相册-填坑篇</title>
    <link href="http://wuxiaolong.me/2016/05/24/Android-Photograph-Album2/"/>
    <id>http://wuxiaolong.me/2016/05/24/Android-Photograph-Album2/</id>
    <published>2016-05-24T00:56:59.000Z</published>
    <updated>2016-08-25T11:38:52.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前分享了<a href="http://wuxiaolong.me/2014/11/10/Android-Photograph_Album/">Android调用系统相机和相册</a>，但是由于国内Android机型繁多，各家都自己的rom，调用系统的还是会出现不少问题：</p>
</blockquote>
<h1 id="拍照后照片被旋转"><a href="#拍照后照片被旋转" class="headerlink" title="拍照后照片被旋转"></a>拍照后照片被旋转</h1><p>这种情况是使用Camera拍照以后，得到的照片会被自动旋转（90°、180°、270°）。解决方案：</p>
<p>1、读取图片的旋转属性<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 读取图片的旋转的角度</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> path</div><div class="line"> *            图片绝对路径</div><div class="line"> * <span class="doctag">@return</span> 图片的旋转角度</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBitmapDegree</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> degree = <span class="number">0</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 从指定路径下读取图片，并获取其EXIF信息</span></div><div class="line">        ExifInterface exifInterface = <span class="keyword">new</span> ExifInterface(path);</div><div class="line">        <span class="comment">// 获取图片的旋转信息</span></div><div class="line">        <span class="keyword">int</span> orientation = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION,</div><div class="line">                ExifInterface.ORIENTATION_NORMAL);</div><div class="line">        <span class="keyword">switch</span> (orientation) &#123;</div><div class="line">        <span class="keyword">case</span> ExifInterface.ORIENTATION_ROTATE_90:</div><div class="line">            degree = <span class="number">90</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ExifInterface.ORIENTATION_ROTATE_180:</div><div class="line">            degree = <span class="number">180</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> ExifInterface.ORIENTATION_ROTATE_270:</div><div class="line">            degree = <span class="number">270</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> degree;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、将图片按照某个角度进行旋转<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将图片按照某个角度进行旋转</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> bm</div><div class="line"> *            需要旋转的图片</div><div class="line"> * <span class="doctag">@param</span> degree</div><div class="line"> *            旋转角度</div><div class="line"> * <span class="doctag">@return</span> 旋转后的图片</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">rotateBitmapByDegree</span><span class="params">(Bitmap bm, <span class="keyword">int</span> degree)</span> </span>&#123;</div><div class="line">    Bitmap returnBm = <span class="keyword">null</span>;</div><div class="line">  </div><div class="line">    <span class="comment">// 根据旋转角度，生成旋转矩阵</span></div><div class="line">    Matrix matrix = <span class="keyword">new</span> Matrix();</div><div class="line">    matrix.postRotate(degree);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 将原始图片按照旋转矩阵进行旋转，并得到新的图片</span></div><div class="line">        returnBm = Bitmap.createBitmap(bm, <span class="number">0</span>, <span class="number">0</span>, bm.getWidth(), bm.getHeight(), matrix, <span class="keyword">true</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (returnBm == <span class="keyword">null</span>) &#123;</div><div class="line">        returnBm = bm;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (bm != returnBm) &#123;</div><div class="line">        bm.recycle();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> returnBm;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>详见博客：<a href="https://www.baidufe.com/item/4bb733d9999c53cb8fed.html" target="_blank" rel="external">https://www.baidufe.com/item/4bb733d9999c53cb8fed.html</a></p>
<h1 id="调用系统相册，拿不到绝对路径"><a href="#调用系统相册，拿不到绝对路径" class="headerlink" title="调用系统相册，拿不到绝对路径"></a>调用系统相册，拿不到绝对路径</h1><p>上篇的方法，我在大部分手机测试是可行，但是一些机型还是拿不到，解决方案：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsolutePathUtil</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAbsolutePath</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> </span>&#123;</div><div class="line">        <span class="comment">// DocumentProvider</span></div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123;</div><div class="line">            <span class="comment">// ExternalStorageProvider</span></div><div class="line">            <span class="keyword">if</span> (isExternalStorageDocument(uri)) &#123;</div><div class="line">                <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</div><div class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</div><div class="line">                <span class="keyword">final</span> String type = split[<span class="number">0</span>];</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="string">"primary"</span>.equalsIgnoreCase(type)) &#123;</div><div class="line">                    <span class="keyword">return</span> Environment.getExternalStorageDirectory() + <span class="string">"/"</span> + split[<span class="number">1</span>];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// TODO handle non-primary volumes</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// DownloadsProvider</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isDownloadsDocument(uri)) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> String id = DocumentsContract.getDocumentId(uri);</div><div class="line">                <span class="keyword">final</span> Uri contentUri = ContentUris.withAppendedId(</div><div class="line">                        Uri.parse(<span class="string">"content://downloads/public_downloads"</span>), Long.valueOf(id));</div><div class="line"></div><div class="line">                <span class="keyword">return</span> getDataColumn(context, contentUri, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// MediaProvider</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (isMediaDocument(uri)) &#123;</div><div class="line">                <span class="keyword">final</span> String docId = DocumentsContract.getDocumentId(uri);</div><div class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</div><div class="line">                <span class="keyword">final</span> String type = split[<span class="number">0</span>];</div><div class="line"></div><div class="line">                Uri contentUri = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="string">"image"</span>.equals(type)) &#123;</div><div class="line">                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"video"</span>.equals(type)) &#123;</div><div class="line">                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"audio"</span>.equals(type)) &#123;</div><div class="line">                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> String selection = <span class="string">"_id=?"</span>;</div><div class="line">                <span class="keyword">final</span> String[] selectionArgs = <span class="keyword">new</span> String[]&#123;</div><div class="line">                        split[<span class="number">1</span>]</div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> getDataColumn(context, contentUri, selection, selectionArgs);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// MediaStore (and general)</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"content"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</div><div class="line">            <span class="keyword">return</span> getDataColumn(context, uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// File</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"file"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</div><div class="line">            <span class="keyword">return</span> uri.getPath();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the value of the data column for this Uri. This is useful for</div><div class="line">     * MediaStore Uris, and other file-based ContentProviders.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context       The context.</div><div class="line">     * <span class="doctag">@param</span> uri           The Uri to query.</div><div class="line">     * <span class="doctag">@param</span> selection     (Optional) Filter used in the query.</div><div class="line">     * <span class="doctag">@param</span> selectionArgs (Optional) Selection arguments used in the query.</div><div class="line">     * <span class="doctag">@return</span> The value of the _data column, which is typically a file path.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataColumn</span><span class="params">(Context context, Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line"></div><div class="line">        Cursor cursor = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">final</span> String column = <span class="string">"_data"</span>;</div><div class="line">        <span class="keyword">final</span> String[] projection = &#123;</div><div class="line">                column</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,</div><div class="line">                    <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> column_index = cursor.getColumnIndexOrThrow(column);</div><div class="line">                <span class="keyword">return</span> cursor.getString(column_index);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</div><div class="line">                cursor.close();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> uri The Uri to check.</div><div class="line">     * <span class="doctag">@return</span> Whether the Uri authority is ExternalStorageProvider.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExternalStorageDocument</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"com.android.externalstorage.documents"</span>.equals(uri.getAuthority());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> uri The Uri to check.</div><div class="line">     * <span class="doctag">@return</span> Whether the Uri authority is DownloadsProvider.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDownloadsDocument</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.downloads.documents"</span>.equals(uri.getAuthority());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> uri The Uri to check.</div><div class="line">     * <span class="doctag">@return</span> Whether the Uri authority is MediaProvider.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMediaDocument</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.media.documents"</span>.equals(uri.getAuthority());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>详见stackoverflow：<a href="http://stackoverflow.com/questions/13209494/how-to-get-the-full-file-path-from-uri" target="_blank" rel="external">http://stackoverflow.com/questions/13209494/how-to-get-the-full-file-path-from-uri</a></p>
<h1 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h1><p>拿到图片的绝对路径，有可能需要对它进行裁剪，这里当然也可以调用系统的裁剪，不过我推荐UCrop，功能好强大，简单的使用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 启动裁剪</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">startUCrop</span><span class="params">(Activity activity, String sourceFilePath, <span class="keyword">int</span> requestCode, <span class="keyword">float</span> aspectRatioX, <span class="keyword">float</span> aspectRatioY)</span> </span>&#123;</div><div class="line">    Uri sourceUri = Uri.fromFile(<span class="keyword">new</span> File(sourceFilePath));</div><div class="line">    File outDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);</div><div class="line">    <span class="keyword">if</span> (!outDir.exists()) &#123;</div><div class="line">        outDir.mkdirs();</div><div class="line">    &#125;</div><div class="line">    File outFile = <span class="keyword">new</span> File(outDir, System.currentTimeMillis() + <span class="string">".jpg"</span>);</div><div class="line">    String cameraScalePath = outFile.getAbsolutePath();</div><div class="line">    Uri destinationUri = Uri.fromFile(outFile);</div><div class="line">    UCrop uCrop = UCrop.of(sourceUri, destinationUri);</div><div class="line">    UCrop.Options options = <span class="keyword">new</span> UCrop.Options();</div><div class="line">    options.setAllowedGestures(UCropActivity.SCALE, UCropActivity.ROTATE, UCropActivity.ALL);</div><div class="line">    options.setHideBottomControls(<span class="keyword">true</span>);</div><div class="line">    options.setFreeStyleCropEnabled(<span class="keyword">true</span>);</div><div class="line">    uCrop.withOptions(options);</div><div class="line">    uCrop.withAspectRatio(aspectRatioX, aspectRatioY);</div><div class="line">    uCrop.start(activity, requestCode);</div><div class="line">    <span class="keyword">return</span> cameraScalePath;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>详见github：<a href="https://github.com/Yalantis/uCrop" target="_blank" rel="external">https://github.com/Yalantis/uCrop</a></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前分享了&lt;a href=&quot;http://wuxiaolong.me/2014/11/10/Android-Photograph_Album/&quot;&gt;Android调用系统相机和相册&lt;/a&gt;，但是由于国内Android机型繁多，各家都自己的rom，调用系统的还是会出现不少问题：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;拍照后照片被旋转&quot;&gt;&lt;a href=&quot;#拍照后照片被旋转&quot; class=&quot;headerlink&quot; title=&quot;拍照后照片被旋转&quot;&gt;&lt;/a&gt;拍照后照片被旋转&lt;/h1&gt;&lt;p&gt;这种情况是使用Camera拍照以后，得到的照片会被自动旋转（90°、180°、270°）。解决方案：&lt;/p&gt;
&lt;p&gt;1、读取图片的旋转属性&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://wuxiaolong.me/categories/Android/"/>
    
    
      <category term="Camera，Album" scheme="http://wuxiaolong.me/tags/Camera%EF%BC%8CAlbum/"/>
    
  </entry>
  
  <entry>
    <title>Android library分享到jcenter</title>
    <link href="http://wuxiaolong.me/2016/05/06/jcenter2/"/>
    <id>http://wuxiaolong.me/2016/05/06/jcenter2/</id>
    <published>2016-05-06T03:07:29.000Z</published>
    <updated>2016-08-25T11:38:52.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前写过同样的一篇教程（地址：<a href="http://wuxiaolong.me/2015/11/12/jcenter/">Android library分享到jcenter</a>），但是配置较多，还不能自己写库名（最新的貌似可以写），起码当时不能（直接取的建库时的名），这点被坑了，后来想改名都不行，后文会说。这篇教程和之前差不多，就配置这块不一样。好，快上车，老司机要开车了。</p>
</blockquote>
<h1 id="申请bintray账号"><a href="#申请bintray账号" class="headerlink" title="申请bintray账号"></a>申请bintray账号</h1><p>登录 <a href="https://bintray.com/" target="_blank" rel="external">bintray.com</a><br>在<a href="https://bintray.com/" target="_blank" rel="external">bintray.com</a>上注册一个账号。<br>点击maven，点击Add New Package，为我们的library创建一个新的package。<br>命名所有字母应该为小写，单词之间用－分割。<br>需要API Key，点击进入你的账户信息里再点击Edit即有查看API Key的选项，把他复制下来。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>library项目最好分成两个module，一个Application Module，一个Library Module。Application Module用于展示库的用法，Library Module是library的源代码。<br><a id="more"></a></p>
<h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><p>修改项目的build.gradle件中的依赖部分，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.1.0'</span></div><div class="line">        classpath <span class="string">'com.novoda:bintray-release:0.3.4'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="配置library"><a href="#配置library" class="headerlink" title="配置library"></a>配置library</h2><p>具体配置可参考我的开源库<a href="https://github.com/WuXiaolong/PullLoadMoreRecyclerView/blob/master/library/build.gradle" target="_blank" rel="external">PullLoadMoreRecyclerView</a>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.library'</span></div><div class="line">android &#123;</div><div class="line">   ……</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">  ……</div><div class="line">&#125;</div><div class="line"><span class="comment">//添加</span></div><div class="line">apply plugin: <span class="string">'com.novoda.bintray-release'</span></div><div class="line">publish &#123;</div><div class="line">    <span class="comment">//bintray.com用户名</span></div><div class="line">    userOrg = <span class="string">'wuxiaolong'</span></div><div class="line">    <span class="comment">//jcenter上的路径</span></div><div class="line">    groupId = <span class="string">'com.wuxiaolong.pullloadmorerecyclerview'</span></div><div class="line">    <span class="comment">//项目名称</span></div><div class="line">    artifactId = <span class="string">'pullloadmorerecyclerview'</span></div><div class="line">    <span class="comment">//版本号</span></div><div class="line">    publishVersion = <span class="string">'1.0.5'</span></div><div class="line">    <span class="comment">//描述，不重要</span></div><div class="line">    desc = <span class="string">'实现RecyclerView下拉刷新和上拉加载更多以及RecyclerView线性、网格、瀑布流效果演示'</span></div><div class="line">    <span class="comment">//网站，不重要</span></div><div class="line">    website = <span class="string">'https://github.com/WuXiaolong/PullLoadMoreRecyclerView'</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>是不是配置少了很多哇，这里解释下，本来我想把项目名称改成pullloadmorerecyclerview，上传也成功了，但是依赖却找不到了，之前默认名是library，我改成了library，上传，这样算一个新的库，得重新审核，哎无奈，只能按照之前的方法去上传。</code></p>
<h1 id="上传library到bintray空间"><a href="#上传library到bintray空间" class="headerlink" title="上传library到bintray空间"></a>上传library到bintray空间</h1><p>请到Android Studio的终端（Terminal）选项卡。<br>输入下面的命令：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gradlew clean build bintrayUpload </div><div class="line"> -PbintrayUser=wuxiaolong </div><div class="line"> -PbintrayKey=这里填写刚刚保存的API Key</div><div class="line"> -PdryRun=<span class="literal">false</span></div></pre></td></tr></table></figure>
<p>如果显示如下，说明成功了！否则有log提示错误。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BUILD SUCCESSFUL</div></pre></td></tr></table></figure></p>
<p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/includeMyPackage.png" alt=""><br>上传完成即可在Bintray网站上找到你的Repo，我们需要完成最后一步工作，申请你的Repo添加到JCenter。可以进入<a href="https://bintray.com/bintray/jcenter" target="_blank" rel="external">这个页面</a>，点击Include My Package，输入你的项目名字，点击匹配到的项目，直接send即可，然后就等管理员批准了。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/jcenterApproved.png" alt=""><br>如上，网站上会给你一条通过信息，然后就OK了，大功告成。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.wuxiaolong.pullloadmorerecyclerview:library:1.0.5'</span></div></pre></td></tr></table></figure>
<p>一般来说，我们需要知道library的字符串形式，包含3部分<br>GROUP_ID:ARTIFACT_ID:VERSION<br>上面的例子中，GROUP_ID是com.wuxiaolong.pullloadmorerecyclerview ，即配置library中group的值；ARTIFACT_ID是library，配置library中没有写到，是library项目的名字；VERSION是1.0.5。<br>查看bintray上库：<br><a href="http://jcenter.bintray.com/com/wuxiaolong/" target="_blank" rel="external">http://jcenter.bintray.com/com/wuxiaolong/</a></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://github.com/novoda/bintray-release" target="_blank" rel="external">bintray-release</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/51148825" target="_blank" rel="external">Android 快速发布开源项目到jcenter</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前写过同样的一篇教程（地址：&lt;a href=&quot;http://wuxiaolong.me/2015/11/12/jcenter/&quot;&gt;Android library分享到jcenter&lt;/a&gt;），但是配置较多，还不能自己写库名（最新的貌似可以写），起码当时不能（直接取的建库时的名），这点被坑了，后来想改名都不行，后文会说。这篇教程和之前差不多，就配置这块不一样。好，快上车，老司机要开车了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;申请bintray账号&quot;&gt;&lt;a href=&quot;#申请bintray账号&quot; class=&quot;headerlink&quot; title=&quot;申请bintray账号&quot;&gt;&lt;/a&gt;申请bintray账号&lt;/h1&gt;&lt;p&gt;登录 &lt;a href=&quot;https://bintray.com/&quot;&gt;bintray.com&lt;/a&gt;&lt;br&gt;在&lt;a href=&quot;https://bintray.com/&quot;&gt;bintray.com&lt;/a&gt;上注册一个账号。&lt;br&gt;点击maven，点击Add New Package，为我们的library创建一个新的package。&lt;br&gt;命名所有字母应该为小写，单词之间用－分割。&lt;br&gt;需要API Key，点击进入你的账户信息里再点击Edit即有查看API Key的选项，把他复制下来。&lt;/p&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;p&gt;library项目最好分成两个module，一个Application Module，一个Library Module。Application Module用于展示库的用法，Library Module是library的源代码。&lt;br&gt;
    
    </summary>
    
      <category term="jcenter" scheme="http://wuxiaolong.me/categories/jcenter/"/>
    
    
      <category term="jcenter" scheme="http://wuxiaolong.me/tags/jcenter/"/>
    
  </entry>
  
  <entry>
    <title>Android zxing</title>
    <link href="http://wuxiaolong.me/2016/04/22/zxing/"/>
    <id>http://wuxiaolong.me/2016/04/22/zxing/</id>
    <published>2016-04-22T02:22:51.000Z</published>
    <updated>2016-08-25T11:38:52.958Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>二维码一般在项目都会用到，今天分享下我开发二维码的一些心得。</p>
</blockquote>
<h1 id="zxing介绍"><a href="#zxing介绍" class="headerlink" title="zxing介绍"></a>zxing介绍</h1><p>github地址：<a href="https://github.com/zxing/zxing" target="_blank" rel="external">https://github.com/zxing/zxing</a><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/zxing1.png" alt=""><br><a id="more"></a><br>代码很多，官方演示的例子在文件android，一个较为完整的app，导入Android studio，发现少了CameraConfigurationUtils，这个类在文件android-core下。官方效果图：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/zxing2.png" alt=""><br>但是实际开发只需要扫码和生成二维码两个功能就夠了，因此我做了抽离删减，最终我的效果图：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/zxing3.png" alt=""></p>
<h1 id="zxing使用"><a href="#zxing使用" class="headerlink" title="zxing使用"></a>zxing使用</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.google.zxing:core:3.2.1&apos;</div></pre></td></tr></table></figure>
<h2 id="扫描二维码"><a href="#扫描二维码" class="headerlink" title="扫描二维码"></a>扫描二维码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">case R.id.qrcode_dencode: //扫描</div><div class="line">intent = new Intent(MainActivity.this, CaptureActivity.class);</div><div class="line">startActivityForResult(intent, REQUEST_CODE);</div><div class="line">break;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">       super.onActivityResult(requestCode, resultCode, data);</div><div class="line">       if (resultCode == RESULT_OK) &#123; //RESULT_OK = -1</div><div class="line">           Bundle bundle = data.getExtras();</div><div class="line">           String scanResult = bundle.getString(&quot;result&quot;);</div><div class="line">           Toast.makeText(MainActivity.this, scanResult, Toast.LENGTH_LONG).show();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">case R.id.qrcode_encode: //生成</div><div class="line">try &#123;</div><div class="line">       Bitmap mBitmap = QRCodeEncoder.encodeAsBitmap(&quot;http://wuxiaolong.me/&quot;, 300);</div><div class="line">       qrcodeImg.setImageBitmap(mBitmap);</div><div class="line"></div><div class="line">     &#125; catch (Exception e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">     &#125;</div><div class="line">    break;</div></pre></td></tr></table></figure>
<h2 id="识别二维码"><a href="#识别二维码" class="headerlink" title="识别二维码"></a>识别二维码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//长按图片识别二维码</div><div class="line">       qrcodeImg.setOnLongClickListener(new View.OnLongClickListener() &#123;</div><div class="line">           @Override</div><div class="line">           public boolean onLongClick(View v) &#123;</div><div class="line">               qrcodeImg.setDrawingCacheEnabled(true);</div><div class="line">               Bitmap bitmap = Bitmap.createBitmap(qrcodeImg.getDrawingCache());</div><div class="line">               qrcodeImg.setDrawingCacheEnabled(false);</div><div class="line">               decodeQRCode(bitmap);</div><div class="line">               return true;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">   * 解析二维码图片</div><div class="line">   *</div><div class="line">   * @param bitmap   要解析的二维码图片</div><div class="line">   */</div><div class="line">  public final Map&lt;DecodeHintType, Object&gt; HINTS = new EnumMap&lt;&gt;(DecodeHintType.class);</div><div class="line"></div><div class="line">  public void decodeQRCode(final Bitmap bitmap) &#123;</div><div class="line">      new AsyncTask&lt;Void, Void, String&gt;() &#123;</div><div class="line">          @Override</div><div class="line">          protected String doInBackground(Void... params) &#123;</div><div class="line">              try &#123;</div><div class="line">                  int width = bitmap.getWidth();</div><div class="line">                  int height = bitmap.getHeight();</div><div class="line">                  int[] pixels = new int[width * height];</div><div class="line">                  bitmap.getPixels(pixels, 0, width, 0, 0, width, height);</div><div class="line">                  RGBLuminanceSource source = new RGBLuminanceSource(width, height, pixels);</div><div class="line">                  Result result = new MultiFormatReader().decode(new BinaryBitmap(new HybridBinarizer(source)), HINTS);</div><div class="line">                  return result.getText();</div><div class="line">              &#125; catch (Exception e) &#123;</div><div class="line">                  return null;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          @Override</div><div class="line">          protected void onPostExecute(String result) &#123;</div><div class="line">              Log.d(&quot;wxl&quot;, &quot;result=&quot; + result);</div><div class="line">              Toast.makeText(MainActivity.this, result, Toast.LENGTH_LONG).show();</div><div class="line">          &#125;</div><div class="line">      &#125;.execute();</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>由于时间仓促，抽离的代码可能或多或少有些问题，细节待优化。<br>另外，ViewfinderView自定义属性参考了<a href="http://my.oschina.net/smuswc/blog/609413?fromerr=RgSd7WKf" target="_blank" rel="external">http://my.oschina.net/smuswc/blog/609413?fromerr=RgSd7WKf</a></p>
<h1 id="官方zxing例子学习"><a href="#官方zxing例子学习" class="headerlink" title="官方zxing例子学习"></a>官方zxing例子学习</h1><blockquote>
<p>如果代码涉及core-3.2.1，就不在研究，有兴趣可自行深入去学习。</p>
</blockquote>
<h2 id="扫描二维码-1"><a href="#扫描二维码-1" class="headerlink" title="扫描二维码"></a>扫描二维码</h2><p>代码调用顺序CaptureActivity —–&gt; CaptureActivityHandler —–&gt; CameraManager —–&gt; PreviewCallback —–&gt; DecodeHandler —–&gt; CaptureActivityHandler  —–&gt; CaptureActivity。下面一一分析。</p>
<h3 id="CaptureActivity"><a href="#CaptureActivity" class="headerlink" title="CaptureActivity"></a>CaptureActivity</h3><p>CaptureActivity入口类，主要做了Camera，Beep，AmbientLight等初始化。CaptureActivityHandler初始化是在initCamera方法里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void initCamera(SurfaceHolder surfaceHolder) &#123;</div><div class="line">       ……</div><div class="line">           // Creating the handler starts the preview, which can also throw a RuntimeException.</div><div class="line">           if (handler == null) &#123;</div><div class="line">               handler = new CaptureActivityHandler(this, decodeFormats, decodeHints, characterSet, cameraManager);</div><div class="line">      ……</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="CaptureActivityHandler"><a href="#CaptureActivityHandler" class="headerlink" title="CaptureActivityHandler"></a>CaptureActivityHandler</h3><p>CaptureActivityHandler构造方法做了DecodeThread初始化，DecodeThread run方法做了DecodeHandler初始化，然后Camera开始扫码工作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> public CaptureActivityHandler(CaptureActivity activity,</div><div class="line">                                 Collection&lt;BarcodeFormat&gt; decodeFormats,</div><div class="line">                                 Map&lt;DecodeHintType, ?&gt; baseHints,</div><div class="line">                                 String characterSet,</div><div class="line">                                 CameraManager cameraManager) &#123;</div><div class="line">       this.activity = activity;</div><div class="line">       decodeThread = new DecodeThread(activity, decodeFormats, baseHints, characterSet,</div><div class="line">               new ViewfinderResultPointCallback(activity.getViewfinderView()));</div><div class="line">       decodeThread.start();</div><div class="line">       state = State.SUCCESS;</div><div class="line"></div><div class="line">       // Start ourselves capturing previews and decoding.</div><div class="line">       this.cameraManager = cameraManager;</div><div class="line">       cameraManager.startPreview();</div><div class="line">       restartPreviewAndDecode();</div><div class="line">   &#125;</div><div class="line">private void restartPreviewAndDecode() &#123;</div><div class="line">       if (state == State.SUCCESS) &#123;</div><div class="line">           state = State.PREVIEW;</div><div class="line">           //decodeThread.getHandler()拿到DecodeHandler</div><div class="line">           cameraManager.requestPreviewFrame(decodeThread.getHandler(), R.id.decode);</div><div class="line">           activity.drawViewfinder();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="CameraManager"><a href="#CameraManager" class="headerlink" title="CameraManager"></a>CameraManager</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public synchronized void requestPreviewFrame(Handler handler, int message) &#123;</div><div class="line">        OpenCamera theCamera = camera;</div><div class="line">        if (theCamera != null &amp;&amp; previewing) &#123;</div><div class="line">            previewCallback.setHandler(handler, message);</div><div class="line">            theCamera.getCamera().setOneShotPreviewCallback(previewCallback);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="PreviewCallback"><a href="#PreviewCallback" class="headerlink" title="PreviewCallback"></a>PreviewCallback</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">void setHandler(Handler previewHandler, int previewMessage) &#123;</div><div class="line">   this.previewHandler = previewHandler;</div><div class="line">   this.previewMessage = previewMessage;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> @Override</div><div class="line"> public void onPreviewFrame(byte[] data, Camera camera) &#123;</div><div class="line">   Point cameraResolution = configManager.getCameraResolution();</div><div class="line">   Handler thePreviewHandler = previewHandler;</div><div class="line">   if (cameraResolution != null &amp;&amp; thePreviewHandler != null) &#123;</div><div class="line">     //给DecodeHandler发消息</div><div class="line">     Message message = thePreviewHandler.obtainMessage(previewMessage, cameraResolution.x,</div><div class="line">         cameraResolution.y, data);</div><div class="line">     message.sendToTarget();</div><div class="line">     previewHandler = null;</div><div class="line">   &#125; else &#123;</div><div class="line">     Log.d(TAG, &quot;Got preview callback, but no handler or resolution available&quot;);</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="DecodeHandler"><a href="#DecodeHandler" class="headerlink" title="DecodeHandler"></a>DecodeHandler</h3><p>扫码结果，反馈给CaptureActivityHandler<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void handleMessage(Message message) &#123;</div><div class="line">        if (!running) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        int what = message.what;</div><div class="line">        if (what == R.id.decode) &#123;</div><div class="line">            decode((byte[]) message.obj, message.arg1, message.arg2);</div><div class="line">        &#125; else if (what == R.id.quit) &#123;</div><div class="line">            running = false;</div><div class="line">            Looper.myLooper().quit();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"> private void decode(byte[] data, int width, int height) &#123;</div><div class="line">        long start = System.currentTimeMillis();</div><div class="line">        Result rawResult = null;</div><div class="line">        PlanarYUVLuminanceSource source = activity.getCameraManager().buildLuminanceSource(data, width, height);</div><div class="line">        if (source != null) &#123;</div><div class="line">            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));</div><div class="line">            try &#123;</div><div class="line">                rawResult = multiFormatReader.decodeWithState(bitmap);</div><div class="line">            &#125; catch (ReaderException re) &#123;</div><div class="line">                // continue</div><div class="line">            &#125; finally &#123;</div><div class="line">                multiFormatReader.reset();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Handler handler = activity.getHandler();//拿到CaptureActivityHandler</div><div class="line">        if (rawResult != null) &#123;</div><div class="line">            // Don&apos;t log the barcode contents for security.</div><div class="line">            long end = System.currentTimeMillis();</div><div class="line">            Log.d(TAG, &quot;Found barcode in &quot; + (end - start) + &quot; ms&quot;);</div><div class="line">            if (handler != null) &#123;</div><div class="line">                //给CaptureActivityHandler发消息</div><div class="line">                Message message = Message.obtain(handler, R.id.decode_succeeded, rawResult);</div><div class="line">                Bundle bundle = new Bundle();</div><div class="line">                bundleThumbnail(source, bundle);</div><div class="line">                message.setData(bundle);</div><div class="line">                message.sendToTarget();</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (handler != null) &#123;</div><div class="line">                Message message = Message.obtain(handler, R.id.decode_failed);</div><div class="line">                message.sendToTarget();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="CaptureActivityHandler-1"><a href="#CaptureActivityHandler-1" class="headerlink" title="CaptureActivityHandler"></a>CaptureActivityHandler</h3><p>扫码结果，再反馈给CaptureActivity，这样就走完了扫码过程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public void handleMessage(Message message) &#123;</div><div class="line">       int what = message.what;</div><div class="line">       if (what == R.id.restart_preview) &#123;</div><div class="line">           restartPreviewAndDecode();</div><div class="line">       &#125; else if (what == R.id.decode_succeeded) &#123;</div><div class="line">           state = State.SUCCESS;</div><div class="line">           Bundle bundle = message.getData();</div><div class="line">           Bitmap barcode = null;</div><div class="line">           float scaleFactor = 1.0f;</div><div class="line">           if (bundle != null) &#123;</div><div class="line">               byte[] compressedBitmap = bundle.getByteArray(DecodeThread.BARCODE_BITMAP);</div><div class="line">               if (compressedBitmap != null) &#123;</div><div class="line">                   barcode = BitmapFactory.decodeByteArray(compressedBitmap, 0, compressedBitmap.length, null);</div><div class="line">                   // Mutable copy:</div><div class="line">                   barcode = barcode.copy(Bitmap.Config.ARGB_8888, true);</div><div class="line">               &#125;</div><div class="line">               scaleFactor = bundle.getFloat(DecodeThread.BARCODE_SCALED_FACTOR);</div><div class="line">           &#125;</div><div class="line">           activity.handleDecode((Result) message.obj, barcode, scaleFactor);</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="生成二维码-1"><a href="#生成二维码-1" class="headerlink" title="生成二维码"></a>生成二维码</h2><p>只需要以下核心代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public static Bitmap encodeAsBitmap(String contents, int dimension) throws WriterException &#123;</div><div class="line"></div><div class="line">        String contentsToEncode = contents;</div><div class="line">        if (contentsToEncode == null) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        Map&lt;EncodeHintType, Object&gt; hints = null;</div><div class="line">        String encoding = guessAppropriateEncoding(contentsToEncode);</div><div class="line">        if (encoding != null) &#123;</div><div class="line">            hints = new EnumMap&lt;&gt;(EncodeHintType.class);</div><div class="line">            hints.put(EncodeHintType.CHARACTER_SET, encoding);</div><div class="line">        &#125;</div><div class="line">        BitMatrix result;</div><div class="line">        try &#123;</div><div class="line">            result = new MultiFormatWriter().encode(contentsToEncode, BarcodeFormat.QR_CODE, dimension, dimension, hints);</div><div class="line">        &#125; catch (IllegalArgumentException iae) &#123;</div><div class="line">            // Unsupported format</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        int width = result.getWidth();</div><div class="line">        int height = result.getHeight();</div><div class="line">        int[] pixels = new int[width * height];</div><div class="line">        for (int y = 0; y &lt; height; y++) &#123;</div><div class="line">            int offset = y * width;</div><div class="line">            for (int x = 0; x &lt; width; x++) &#123;</div><div class="line">                pixels[offset + x] = result.get(x, y) ? BLACK : WHITE;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</div><div class="line">        bitmap.setPixels(pixels, 0, width, 0, 0, width, height);</div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static String guessAppropriateEncoding(CharSequence contents) &#123;</div><div class="line">        // Very crude at the moment</div><div class="line">        for (int i = 0; i &lt; contents.length(); i++) &#123;</div><div class="line">            if (contents.charAt(i) &gt; 0xFF) &#123;</div><div class="line">                return &quot;UTF-8&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>官方的例子和我自己的抽离出的代码都上传github了，地址：<a href="https://github.com/WuXiaolong/zxingSample" target="_blank" rel="external">https://github.com/WuXiaolong/zxingSample</a></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;二维码一般在项目都会用到，今天分享下我开发二维码的一些心得。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;zxing介绍&quot;&gt;&lt;a href=&quot;#zxing介绍&quot; class=&quot;headerlink&quot; title=&quot;zxing介绍&quot;&gt;&lt;/a&gt;zxing介绍&lt;/h1&gt;&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/zxing/zxing&quot;&gt;https://github.com/zxing/zxing&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://7q5c2h.com1.z0.glb.clouddn.com/zxing1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SourceAnalysis" scheme="http://wuxiaolong.me/categories/SourceAnalysis/"/>
    
    
      <category term="zxing" scheme="http://wuxiaolong.me/tags/zxing/"/>
    
  </entry>
  
  <entry>
    <title>【译】Android Studio、Android SDK在线更新</title>
    <link href="http://wuxiaolong.me/2016/04/08/androidSdkStudioUpdate/"/>
    <id>http://wuxiaolong.me/2016/04/08/androidSdkStudioUpdate/</id>
    <published>2016-04-08T12:23:25.000Z</published>
    <updated>2016-08-25T11:38:52.942Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>重点介绍网站<a href="http://www.androiddevtools.cn/，收集整理Android开发所需的Android" target="_blank" rel="external">http://www.androiddevtools.cn/，收集整理Android开发所需的Android</a> SDK、开发中用到的工具、Android开发教程、Android设计规范，免费的设计素材等。感谢脉脉不得语，分享这么棒的AndroidTools！</p>
</blockquote>
<h1 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/as2.0.png" alt=""><br>就在今天，Android Studio终于迎来了2.0正式版更新（此版本最重要的两个更新是：即时运行和 GPU Profiler。同时还有全新的 Android 开发套件，速度强行提升 50 倍），之前Android Studio Preview和Beta版本还存在很多bug，因此不建议更新。</p>
<p>升级注意问题<br>1、点击Check for Update不能出现上面的<code>增量升级</code>提示，多点击几次Check for Update<br>2、升级完成，默认配置gradle1.5，进入后会报错，会有提示，做相应gradle同步<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>原文地址:<a href="http://android-mirror.bugly.qq.com:8080/include/usage.html" target="_blank" rel="external">http://android-mirror.bugly.qq.com:8080/include/usage.html</a></p>
</blockquote>
<p><code>新手必知技能</code>：您去更新升级Android Studio时却提示 Connection failed. Please check your network connection and try again，shit，由于墙内，您也无法更新Android SDK，这里分享一篇教程帮您解决此烦恼，原文是英文，我适当做了翻译（本身我英文是渣渣，基本是意译）。</p>
<h1 id="Android-Studio在线更新"><a href="#Android-Studio在线更新" class="headerlink" title="Android Studio在线更新"></a>Android Studio在线更新</h1><p>1、打开Android Studio安装的bin目录，如’D:\Android Studio\bin’<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asd1.png" alt=""></p>
<p>2、用文本编辑器（Notepad++），64位，打开 ‘studio64.exe.vmoptions’，32位，则打开studio.exe.vmoptions’<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asd2.png" alt=""></p>
<p>3、在studio64.exe.vmoptions文件添加如下：<br>-Djava.net.preferIPv4Stack=true<br>-Didea.updates.url=<a href="http://android-mirror.bugly.qq.com:8080/AndroidStudio/patches/updates.xml" target="_blank" rel="external">http://android-mirror.bugly.qq.com:8080/AndroidStudio/patches/updates.xml</a><br>-Didea.patches.url=<a href="http://android-mirror.bugly.qq.com:8080/AndroidStudio/patches/" target="_blank" rel="external">http://android-mirror.bugly.qq.com:8080/AndroidStudio/patches/</a> </p>
<p>4、点击检测升级Android Studio<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asd3.png" alt=""></p>
<p>点击 ‘Update and Restart’.<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/asd4.png" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/incremental.png" alt=""><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/restart.png" alt=""></p>
<p>笔者：到此，Android Studio更新版本完成。</p>
<h1 id="Android-SDK在线更新镜像服务器"><a href="#Android-SDK在线更新镜像服务器" class="headerlink" title="Android SDK在线更新镜像服务器"></a>Android SDK在线更新镜像服务器</h1><p>1、 打开 Android SDK Manager<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/sdk_manager.png" alt=""><br>2、配置用户自定义网站<br>点击 “User Defined Sites”，新建，添加<a href="http://android-mirror.bugly.qq.com:8080/android/repository/addon.xml" target="_blank" rel="external">http://android-mirror.bugly.qq.com:8080/android/repository/addon.xml</a><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/site.png" alt=""><br>3、配置端口<br>勾上 Force https://… sources to be fetched using http://…<br> <img src="http://7q5c2h.com1.z0.glb.clouddn.com/proxy.png" alt=""></p>
<p>笔者：重新打开Android SDK Manager，发现居然能在线更新 </p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;重点介绍网站&lt;a href=&quot;http://www.androiddevtools.cn/，收集整理Android开发所需的Android&quot;&gt;http://www.androiddevtools.cn/，收集整理Android开发所需的Android&lt;/a&gt; SDK、开发中用到的工具、Android开发教程、Android设计规范，免费的设计素材等。感谢脉脉不得语，分享这么棒的AndroidTools！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;号外&quot;&gt;&lt;a href=&quot;#号外&quot; class=&quot;headerlink&quot; title=&quot;号外&quot;&gt;&lt;/a&gt;号外&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7q5c2h.com1.z0.glb.clouddn.com/as2.0.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;就在今天，Android Studio终于迎来了2.0正式版更新（此版本最重要的两个更新是：即时运行和 GPU Profiler。同时还有全新的 Android 开发套件，速度强行提升 50 倍），之前Android Studio Preview和Beta版本还存在很多bug，因此不建议更新。&lt;/p&gt;
&lt;p&gt;升级注意问题&lt;br&gt;1、点击Check for Update不能出现上面的&lt;code&gt;增量升级&lt;/code&gt;提示，多点击几次Check for Update&lt;br&gt;2、升级完成，默认配置gradle1.5，进入后会报错，会有提示，做相应gradle同步&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://wuxiaolong.me/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="http://wuxiaolong.me/tags/Android-Studio/"/>
    
      <category term="SDK" scheme="http://wuxiaolong.me/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>RxBus</title>
    <link href="http://wuxiaolong.me/2016/04/07/rxbus/"/>
    <id>http://wuxiaolong.me/2016/04/07/rxbus/</id>
    <published>2016-04-07T01:10:20.000Z</published>
    <updated>2016-08-25T11:38:52.954Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>相信大多数开发者都使用过EventBus或者Otto(我还未实践过)，作为事件总线通信库，如果你的项目已经加入RxJava和EventBus(或Otto)，那不妨用RxBus代替EventBus或者Otto，省去更多库的依赖。</p>
</blockquote>
<h1 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1><p>之前已经分享过<a href="http://wuxiaolong.me/2016/01/18/rxjava/">RxJava</a>知识，可以点击<a href="http://wuxiaolong.me/2016/01/18/rxjava/">RxJava</a>，这里不再细说。</p>
<h1 id="RxBus"><a href="#RxBus" class="headerlink" title="RxBus"></a>RxBus</h1><p>假设你已经对<a href="http://wuxiaolong.me/2016/01/18/rxjava/">RxJava</a>有所了解，再继续往下看。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class RxBus &#123;</div><div class="line">    private static RxBus mRxBus = null;</div><div class="line">    /**</div><div class="line">     * PublishSubject只会把在订阅发生的时间点之后来自原始Observable的数据发射给观察者</div><div class="line">     */</div><div class="line"></div><div class="line">    private Subject&lt;Object, Object&gt; mRxBusObserverable = new SerializedSubject&lt;&gt;(PublishSubject.create());</div><div class="line"></div><div class="line">    public static synchronized RxBus getInstance() &#123;</div><div class="line">        if (mRxBus == null) &#123;</div><div class="line">            mRxBus = new RxBus();</div><div class="line">        &#125;</div><div class="line">        return mRxBus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void post(Object o) &#123;</div><div class="line">    if (hasObservers()) &#123;</div><div class="line">        mRxBusObserverable.onNext(o);</div><div class="line">		&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Observable&lt;Object&gt; toObserverable() &#123;</div><div class="line">        return mRxBusObserverable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 判断是否有订阅者</div><div class="line">     */</div><div class="line">    public boolean hasObservers() &#123;</div><div class="line">        return mRxBusObserverable.hasObservers();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="代码调用"><a href="#代码调用" class="headerlink" title="代码调用"></a>代码调用</h1><p>先模拟一个订阅者，用hasObservers判断是否有订阅者，然后再发送。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">public class RxBusActivity extends AppCompatActivity &#123;</div><div class="line">    private CompositeSubscription mCompositeSubscription;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_rx_bus);</div><div class="line">        rxBusObservers();</div><div class="line">        rxBusPost();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void rxBusPost() &#123;</div><div class="line">        findViewById(R.id.button).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                RxBus.getInstance().post(HandleEvent.getInstance());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void addSubscription(Subscription subscription) &#123;</div><div class="line">        if (this.mCompositeSubscription == null) &#123;</div><div class="line">            this.mCompositeSubscription = new CompositeSubscription();</div><div class="line">        &#125;</div><div class="line">        this.mCompositeSubscription.add(subscription);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private void rxBusObservers() &#123;</div><div class="line">        Subscription subscription = RxBus.getInstance()</div><div class="line">                .toObserverable()</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(new Subscriber&lt;Object&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void onCompleted() &#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    public void onError(Throwable e) &#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    public void onNext(Object event) &#123;</div><div class="line">                        if (event instanceof HandleEvent) &#123;</div><div class="line">                            //do something</div><div class="line">                            Log.d(&quot;wxl&quot;, &quot;rxBusHandle&quot;);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        addSubscription(subscription);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        Log.d(&quot;wxl&quot;, &quot;onDestroy&quot;);</div><div class="line">        if (this.mCompositeSubscription != null) &#123;</div><div class="line">		    //取消注册，以避免内存泄露</div><div class="line">            this.mCompositeSubscription.unsubscribe();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p><a href="https://github.com/WuXiaolong/AndroidSamples" target="_blank" rel="external">https://github.com/WuXiaolong/AndroidSamples</a></p>
<h1 id="EventBus源码解析"><a href="#EventBus源码解析" class="headerlink" title="EventBus源码解析"></a>EventBus源码解析</h1><p>附上大牛们分析的EventBus源码，有兴趣可以看看<br><a href="http://kymjs.com/code/2015/12/12/01/" target="_blank" rel="external">EventBus源码研读</a> by kymjs张涛<br><a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">EventBus 源码解析</a> by Trinea</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://github.com/kaushikgopal/RxJava-Android-Samples/blob/master/app/src/main/java/com/morihacky/android/rxjava/rxbus/RxBus.java" target="_blank" rel="external">RxJava-Android-Samples</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;相信大多数开发者都使用过EventBus或者Otto(我还未实践过)，作为事件总线通信库，如果你的项目已经加入RxJava和EventBus(或Otto)，那不妨用RxBus代替EventBus或者Otto，省去更多库的依赖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;RxJava&quot;&gt;&lt;a href=&quot;#RxJava&quot; class=&quot;headerlink&quot; title=&quot;RxJava&quot;&gt;&lt;/a&gt;RxJava&lt;/h1&gt;&lt;p&gt;之前已经分享过&lt;a href=&quot;http://wuxiaolong.me/2016/01/18/rxjava/&quot;&gt;RxJava&lt;/a&gt;知识，可以点击&lt;a href=&quot;http://wuxiaolong.me/2016/01/18/rxjava/&quot;&gt;RxJava&lt;/a&gt;，这里不再细说。&lt;/p&gt;
&lt;h1 id=&quot;RxBus&quot;&gt;&lt;a href=&quot;#RxBus&quot; class=&quot;headerlink&quot; title=&quot;RxBus&quot;&gt;&lt;/a&gt;RxBus&lt;/h1&gt;&lt;p&gt;假设你已经对&lt;a href=&quot;http://wuxiaolong.me/2016/01/18/rxjava/&quot;&gt;RxJava&lt;/a&gt;有所了解，再继续往下看。&lt;br&gt;
    
    </summary>
    
      <category term="RxJava" scheme="http://wuxiaolong.me/categories/RxJava/"/>
    
    
      <category term="Android" scheme="http://wuxiaolong.me/tags/Android/"/>
    
      <category term="RxJava" scheme="http://wuxiaolong.me/tags/RxJava/"/>
    
      <category term="RxBus" scheme="http://wuxiaolong.me/tags/RxBus/"/>
    
  </entry>
  
  <entry>
    <title>不忘初心，方得始终</title>
    <link href="http://wuxiaolong.me/2016/04/05/zhuangbi/"/>
    <id>http://wuxiaolong.me/2016/04/05/zhuangbi/</id>
    <published>2016-04-05T10:58:32.000Z</published>
    <updated>2016-08-25T11:38:52.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>多年后，我竟成了自己曾经讨厌的那种人。</p>
</blockquote>
<p>我最讨厌虚伪和装逼的人，近来，流行“这个逼给满分”，于是有了以下一个装逼行为。<br><a id="more"></a><br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/zhuangbi.png" alt=""></p>
<p>逼点：1、能谷歌哦；2、搜出都是自己的内容。</p>
<p>我有时候装逼是为了娱乐，是一种<code>自嘲</code>。</p>
<p>之前就在思考一个问题：博客该分享什么？到了目前这个阶段，我都不好意思分享一些入门的知识（又在装），是不是分享一些库的使用显得太low，非要一直分享什么什么源码剖析才显得高大上？因而来维持自己“大神”的形象，我又何时那么在乎别人对我的看法？</p>
<p>这些想法其实很搞笑，不要忘记我当初为什么要写东西：俗话说，好记忆不如烂笔头，我不是个聪明的人，但我是个勤奋的人，把工作的经验记录下来，是为了下次再遇到同样的问题，不至于再去谷歌。这就是我初衷，也不要说，写博客为了造福大家，不该装的逼还是少装，当然如果大家从我的博客收益，那最好不过。</p>
<p>另外，千万别把自己当一回事，因为我什么都不是。</p>
<p>时刻提醒自己：<code>不忘初心，方得始终。 不用太在乎别人的看法，因为过得好不好，自己最清楚。</code></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;多年后，我竟成了自己曾经讨厌的那种人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我最讨厌虚伪和装逼的人，近来，流行“这个逼给满分”，于是有了以下一个装逼行为。&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="http://wuxiaolong.me/categories/Life/"/>
    
    
      <category term="Life" scheme="http://wuxiaolong.me/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Gradle for Android（三）多渠道打包、配置签名信息</title>
    <link href="http://wuxiaolong.me/2016/04/01/gradle4android3/"/>
    <id>http://wuxiaolong.me/2016/04/01/gradle4android3/</id>
    <published>2016-04-01T06:11:14.000Z</published>
    <updated>2016-08-25T11:38:52.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列博客"><a href="#系列博客" class="headerlink" title="系列博客"></a>系列博客</h1><blockquote>
<p><a href="http://wuxiaolong.me/2016/03/30/gradle4android1/">Gradle for Android（一）基本配置、依赖管理</a><br><a href="http://wuxiaolong.me/2016/03/31/gradle4android2/">Gradle for Android（二）全局设置、自定义BuildConfig、混淆</a></p>
</blockquote>
<h1 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h1><p>国内有太多Android App市场，每次发版几十个渠道包。还好Android Gradle给我们提供了productFlavors，我们可以对生成的APK包进行定制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;//多渠道打包</div><div class="line">    xiaomi &#123;</div><div class="line">        applicationId &apos;com.wuxiaolong.gradle4android1&apos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    googlepaly &#123;</div><div class="line">        applicationId &apos;com.wuxiaolong.gradle4android2&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="定制生成的apk文件名"><a href="#定制生成的apk文件名" class="headerlink" title="定制生成的apk文件名"></a>定制生成的apk文件名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">applicationVariants.all &#123; variant -&gt;</div><div class="line">             if (variant.buildType.name.equals(&apos;release&apos;)) &#123;</div><div class="line">                 variant.outputs.each &#123; output -&gt;</div><div class="line">                     def outputFile = output.outputFile</div><div class="line">                     if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</div><div class="line">                         def fileName = &quot;gradle4android_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;_$&#123;variant.flavorName&#125;.apk&quot;</div><div class="line">                         output.outputFile = new File(outputFile.parent, fileName)</div><div class="line">                     &#125;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div></pre></td></tr></table></figure>
<p>输出apk名字：gradle4android_v1.0_2016-03-23_xiaomi.apk</p>
<h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><p>多渠道打包，还会遇到一个问题，比如友盟统计的渠道号，Gradle处理办法：manifestPlaceholders，它允许我们动态替换我们在AndroidManifest文件里定义的占位符。<br>AndroidManifest.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">           android:name=&quot;UMENG_CHANNEL&quot;</div><div class="line">           android:value=&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>如下，${UMENG_CHANNEL_VALUE}占位符会被dev替换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">       manifestPlaceholders = [UMENG_CHANNEL_VALUE: &apos;dev&apos;]</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>如果渠道太多，不用这样一个个去写，可以循环：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">productFlavors.all &#123; flavor -&gt;</div><div class="line">               manifestPlaceholders.put(&quot;UMENG_CHANNEL_VALUE&quot;,name)</div><div class="line">           &#125;</div></pre></td></tr></table></figure></p>
<h2 id="渠道打包完整代码："><a href="#渠道打包完整代码：" class="headerlink" title="渠道打包完整代码："></a>渠道打包完整代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">//省略部分代码</div><div class="line">     buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false//是否启动混淆</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">            applicationVariants.all &#123; variant -&gt;</div><div class="line">                if (variant.buildType.name.equals(&apos;release&apos;)) &#123;</div><div class="line">                    variant.outputs.each &#123; output -&gt;</div><div class="line">                        def outputFile = output.outputFile</div><div class="line">                        if (outputFile != null &amp;&amp; outputFile.name.endsWith(&apos;.apk&apos;)) &#123;</div><div class="line">                            def fileName = &quot;gradleTest_v$&#123;defaultConfig.versionName&#125;_$&#123;releaseTime()&#125;_$&#123;variant.flavorName&#125;.apk&quot;</div><div class="line">                            output.outputFile = new File(outputFile.parent, fileName)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            //针对很多渠道</div><div class="line">            //productFlavors.all &#123; flavor -&gt;</div><div class="line">            //   manifestPlaceholders.put(&quot;UMENG_CHANNEL_VALUE&quot;,name)</div><div class="line">            // &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    productFlavors &#123;//多渠道打包，命令行打包：gradlew assembleRelease</div><div class="line">        xiaomi &#123;</div><div class="line">            applicationId &apos;com.wuxiaolong.gradle4android1&apos;</div><div class="line">            manifestPlaceholders.put(&quot;UMENG_CHANNEL_VALUE&quot;, &apos;xiaomi&apos;)</div><div class="line">        &#125;</div><div class="line">        googlepaly &#123;</div><div class="line">            applicationId &apos;com.wuxiaolong.gradle4android2&apos;</div><div class="line">            manifestPlaceholders.put(&quot;UMENG_CHANNEL_VALUE&quot;, &apos;googlepaly&apos;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> //省略部分代码</div><div class="line"></div><div class="line">def releaseTime() &#123;</div><div class="line">    return new Date().format(&quot;yyyy-MM-dd&quot;, TimeZone.getTimeZone(&quot;UTC&quot;))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="配置签名信息"><a href="#配置签名信息" class="headerlink" title="配置签名信息"></a>配置签名信息</h1><h2 id="Android-Studio设置默认的签名文件"><a href="#Android-Studio设置默认的签名文件" class="headerlink" title="Android Studio设置默认的签名文件"></a>Android Studio设置默认的签名文件</h2><p>新浪微博SSO登录，微信分享这些都需要签名打包，才能看到效果，设置默认签名文件为自己的签名jks，这样就不需要打包了直接运行起来就是正式的签名。<br>在android.signingConfigs{}下定义一个或者多个签名信息，然后在buildTypes{}配置使用即可。<br>在app目录下添加你的.jks，然后app的build.gradle文件中的增加以下内容：<br>第一种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">    signingConfigs &#123;  </div><div class="line">        debug &#123;  </div><div class="line">            storeFile file(&quot;WuXiaolong.jks&quot;)</div><div class="line">            storePassword &apos;android&apos;</div><div class="line">            keyAlias &apos;android&apos;</div><div class="line">            keyPassword &apos;android&apos;</div><div class="line">        &#125;          </div><div class="line">    &#125;  	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>buildTypes没有配置，也是直接取得debug，是不是不配置默认取得是debug呢？<br>第二种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">    signingConfigs &#123;  </div><div class="line">        release &#123;  </div><div class="line">            storeFile file(&quot;WuXiaolong.jks&quot;)</div><div class="line">            storePassword &apos;android&apos;</div><div class="line">            keyAlias &apos;android&apos;</div><div class="line">            keyPassword &apos;android&apos;</div><div class="line">        &#125;          </div><div class="line">    &#125;  </div><div class="line">	buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="签名打包"><a href="#签名打包" class="headerlink" title="签名打包"></a>签名打包</h1><h2 id="通过Android-Studio签名"><a href="#通过Android-Studio签名" class="headerlink" title="通过Android Studio签名"></a>通过Android Studio签名</h2><p>这里不细说了。</p>
<h2 id="通过命令行签名"><a href="#通过命令行签名" class="headerlink" title="通过命令行签名"></a>通过命令行签名</h2><p>如上那样配置签名信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">android &#123;  </div><div class="line">    signingConfigs &#123;  </div><div class="line">        release &#123;  </div><div class="line">            storeFile file(&quot;WuXiaolong.jks&quot;)</div><div class="line">            storePassword &apos;android&apos;</div><div class="line">            keyAlias &apos;android&apos;</div><div class="line">            keyPassword &apos;android&apos;</div><div class="line">        &#125;          </div><div class="line">    &#125;  </div><div class="line">	buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">            signingConfig signingConfigs.release</div><div class="line">        &#125;      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先”build-clean Project”，然后Terminal输入命名行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradlew assembleRelease</div></pre></td></tr></table></figure></p>
<p>打印信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">E:\AndroidStudioProjects\Gradle4Android&gt;gradlew assembleRelease</div><div class="line">:app:preBuild UP-TO-DATE                                                             </div><div class="line">:app:preReleaseBuild UP-TO-DATE     </div><div class="line">:app:checkReleaseManifest                  </div><div class="line">//省略部分               </div><div class="line">:app:packageRelease                 </div><div class="line">:app:zipalignRelease                 </div><div class="line">:app:assembleRelease                 </div><div class="line">               </div><div class="line">BUILD SUCCESSFUL</div></pre></td></tr></table></figure></p>
<p>OK，打包成功的apk路径如：E:\AndroidStudioProjects\Gradle4Android\app\build\outputs\apk\app-release.apk<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/gradle4android3.png" alt=""></p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>
<h1 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h1><p><a href="https://github.com/WuXiaolong/Gradle4Android" target="_blank" rel="external">https://github.com/WuXiaolong/Gradle4Android</a></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://segmentfault.com/a/1190000004229002" target="_blank" rel="external">Gradle for Android 第一篇( 从 Gradle 和 AS 开始 )</a><br><a href="http://www.flysnow.org/2015/03/30/manage-your-android-project-with-gradle.html" target="_blank" rel="external">使用Gradle管理你的Android Studio工程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系列博客&quot;&gt;&lt;a href=&quot;#系列博客&quot; class=&quot;headerlink&quot; title=&quot;系列博客&quot;&gt;&lt;/a&gt;系列博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://wuxiaolong.me/2016/03/30/gradle4android1/&quot;&gt;Gradle for Android（一）基本配置、依赖管理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wuxiaolong.me/2016/03/31/gradle4android2/&quot;&gt;Gradle for Android（二）全局设置、自定义BuildConfig、混淆&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;多渠道打包&quot;&gt;&lt;a href=&quot;#多渠道打包&quot; class=&quot;headerlink&quot; title=&quot;多渠道打包&quot;&gt;&lt;/a&gt;多渠道打包&lt;/h1&gt;&lt;p&gt;国内有太多Android App市场，每次发版几十个渠道包。还好Android Gradle给我们提供了productFlavors，我们可以对生成的APK包进行定制。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;productFlavors &amp;#123;//多渠道打包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    xiaomi &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        applicationId &amp;apos;com.wuxiaolong.gradle4android1&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    googlepaly &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        applicationId &amp;apos;com.wuxiaolong.gradle4android2&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://wuxiaolong.me/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://wuxiaolong.me/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle for Android（二）全局设置、自定义BuildConfig、混淆</title>
    <link href="http://wuxiaolong.me/2016/03/31/gradle4android2/"/>
    <id>http://wuxiaolong.me/2016/03/31/gradle4android2/</id>
    <published>2016-03-31T06:11:14.000Z</published>
    <updated>2016-08-25T11:38:52.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系列博客"><a href="#系列博客" class="headerlink" title="系列博客"></a>系列博客</h1><blockquote>
<p><a href="http://wuxiaolong.me/2016/03/30/gradle4android1/">Gradle for Android（一）基本配置、依赖管理</a><br><a href="http://wuxiaolong.me/2016/04/01/gradle4android3/">Gradle for Android（三）多渠道打包、配置签名信息</a></p>
</blockquote>
<h1 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h1><p>如果有很多项目，可以设置全局来统一管理版本号或依赖库，根目录下build.gradle下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    compileSdkVersion = 23</div><div class="line">    buildToolsVersion = &quot;23.0.2&quot;</div><div class="line">    minSdkVersion = 14</div><div class="line">    targetSdkVersion = 23</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>app/build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</div><div class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.wuxiaolong.gradle4android&quot;</div><div class="line">        minSdkVersion rootProject.ext.minSdkVersion</div><div class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>可以在根目录下建个config.gradle，然后只需在根目录下build.gradle最顶部加上下面一行代码，然后同步下，意思就是所有的子项目或者所有的modules都可以从这个配置文件里读取内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply from: &quot;config.gradle&quot;</div></pre></td></tr></table></figure></p>
<p>config.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line"></div><div class="line">    android = [</div><div class="line">            compileSdkVersion: 23,</div><div class="line">            buildToolsVersion: &quot;23.0.2&quot;,</div><div class="line">            minSdkVersion    : 14,</div><div class="line">            targetSdkVersion : 22,</div><div class="line"></div><div class="line">    ]</div><div class="line"></div><div class="line">    dependencies = [</div><div class="line">            appcompatV7&apos;: &apos;com.android.support:appcompat-v7:23.2.1&apos;,</div><div class="line">            design      : &apos;com.android.support:design:23.2.1&apos;</div><div class="line"></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>app/build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion rootProject.ext.android.compileSdkVersion</div><div class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.wuxiaolong.gradle4android&quot;</div><div class="line">        minSdkVersion rootProject.ext.android.minSdkVersion</div><div class="line">        targetSdkVersion rootProject.ext.android.targetSdkVersion</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">...</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line">    compile rootProject.ext.dependencies.appcompatV7</div><div class="line">    compile rootProject.ext.dependencies.design</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="自定义BuildConfig"><a href="#自定义BuildConfig" class="headerlink" title="自定义BuildConfig"></a>自定义BuildConfig</h1><p>实际开发中服务器可能有正式环境和测试环境，gradle可以通过buildConfigField来配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">       buildConfigField &apos;String&apos;,&apos;API_SERVER_URL&apos;,&apos;&quot;http://wuxiaolong.me/&quot;&apos;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>buildConfigField 一共有3个参数，第一个是数据类型，和Java的类型是对等的；第二个参数是常量名，这里是API_SERVER_URL；第三个参数就是你要配置的值。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/gradle4android2.png" alt=""><br>如图路径下就有个常量API_SERVER_URL，如何在代码取得这个常量值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(&quot;wxl&quot;, &quot;API_SERVER_URL=&quot; + BuildConfig.API_SERVER_URL);</div></pre></td></tr></table></figure></p>
<h1 id="启用proguard混淆"><a href="#启用proguard混淆" class="headerlink" title="启用proguard混淆"></a>启用proguard混淆</h1><p>一般release发布版本是需要启用混淆的，这样别人反编译之后就很难分析你的代码，而我们自己开发调试的时候是不需要混淆的，所以debug不启用混淆。对release启用混淆的配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled true//是否启动混淆</div><div class="line">			shrinkResources true //是否移除无用资源文件，shrinkResources依赖于minifyEnabled，必须和minifyEnabled一起用</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>minifyEnabled为true表示启用混淆，proguardFile是混淆使用的配置文件，这里是module根目录下的proguard-rules.pro文件</p>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>
<h1 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h1><p><a href="https://github.com/WuXiaolong/Gradle4Android" target="_blank" rel="external">https://github.com/WuXiaolong/Gradle4Android</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系列博客&quot;&gt;&lt;a href=&quot;#系列博客&quot; class=&quot;headerlink&quot; title=&quot;系列博客&quot;&gt;&lt;/a&gt;系列博客&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://wuxiaolong.me/2016/03/30/gradle4android1/&quot;&gt;Gradle for Android（一）基本配置、依赖管理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wuxiaolong.me/2016/04/01/gradle4android3/&quot;&gt;Gradle for Android（三）多渠道打包、配置签名信息&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;全局设置&quot;&gt;&lt;a href=&quot;#全局设置&quot; class=&quot;headerlink&quot; title=&quot;全局设置&quot;&gt;&lt;/a&gt;全局设置&lt;/h1&gt;&lt;p&gt;如果有很多项目，可以设置全局来统一管理版本号或依赖库，根目录下build.gradle下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ext &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    compileSdkVersion = 23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    buildToolsVersion = &amp;quot;23.0.2&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    minSdkVersion = 14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    targetSdkVersion = 23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://wuxiaolong.me/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://wuxiaolong.me/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle for Android（一）基本配置、依赖管理</title>
    <link href="http://wuxiaolong.me/2016/03/30/gradle4android1/"/>
    <id>http://wuxiaolong.me/2016/03/30/gradle4android1/</id>
    <published>2016-03-30T06:11:14.000Z</published>
    <updated>2016-08-25T11:38:52.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Gradle是一种基于Groovy的动态DSL，而Groovy语言是一种基于jvm的动态语言。这里只分享实际开发中会用到的场景，您不需要去学习Groovy语言，知道Java的您是很容易阅读Groovy语言的。<br>系列博客涉及的知识点有：Gradle基本配置、依赖管理、全局设置、自定义BuildConfig、混淆、多渠道打包、配置签名信息、单元测试，是不是迫不及待了啊，快来学习学习。</p>
</blockquote>
<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>新建项目，目录结构如下：<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/gradle4android1.png" alt=""><br><a id="more"></a></p>
<h2 id="app-build-gradle"><a href="#app-build-gradle" class="headerlink" title="app/build.gradle"></a>app/build.gradle</h2><p>初始化的Gradle配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion &quot;23.0.2&quot;</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.wuxiaolong.gradle4android&quot;</div><div class="line">        minSdkVersion 15</div><div class="line">        targetSdkVersion 23</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line">    compile &apos;com.android.support:appcompat-v7:23.2.1&apos;</div><div class="line">    compile &apos;com.android.support:design:23.2.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">apply plugin: ‘com.android.application’，表示该module是一个app module，应用了com.android.application插件，如果是一个android library，那么这里写apply plugin: ‘com.android.library’</div><div class="line"></div><div class="line">compileSdkVersion：基于哪个SDK编译，这里是API LEVEL</div><div class="line"></div><div class="line">buildToolsVersion：基于哪个构建工具版本进行构建的。</div><div class="line"></div><div class="line">defaultConfig：默认配置，如果没有其他的配置覆盖，就会使用这里的。</div><div class="line">applicationId：配置包名的</div><div class="line">versionCode：版本号</div><div class="line">versionName：版本名称</div><div class="line"></div><div class="line">buildTypes是构建类型，常用的有release和debug两种，可以在这里面启用混淆，启用zipAlign以及配置签名信息等。</div><div class="line"></div><div class="line">dependencies：不属于Android专有的配置了，它定义了该module需要依赖的jar，aar，jcenter库信息。</div></pre></td></tr></table></figure>
<h2 id="gradle-wrapper-properties"><a href="#gradle-wrapper-properties" class="headerlink" title="gradle-wrapper.properties"></a>gradle-wrapper.properties</h2><p>声明了gradle的目录与下载路径以及当前项目使用的gradle版本，这些默认的路径我们一般不会更改的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">distributionBase=GRADLE_USER_HOME</div><div class="line">distributionPath=wrapper/dists</div><div class="line">zipStoreBase=GRADLE_USER_HOME</div><div class="line">zipStorePath=wrapper/dists</div><div class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip</div></pre></td></tr></table></figure></p>
<h2 id="根目录的build-gradle"><a href="#根目录的build-gradle" class="headerlink" title="根目录的build.gradle"></a>根目录的build.gradle</h2><p>定义在这个工程下的所有模块的公共属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()//使用jcenter库</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:1.5.0&apos;// 依赖android提供的1.5.0的gradle build</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//为所有的工程的repositories配置为jcenters</div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task clean(type: Delete) &#123;</div><div class="line">    delete rootProject.buildDir</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="setting-gradle"><a href="#setting-gradle" class="headerlink" title="setting.gradle"></a>setting.gradle</h2><p>包含哪些模块，比如有app和library：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &apos;:app&apos;,&apos;:library&apos;</div></pre></td></tr></table></figure></p>
<h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><h2 id="本地依赖"><a href="#本地依赖" class="headerlink" title="本地依赖"></a>本地依赖</h2><h3 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h3><p>默认情况下，新建的Android项目会有一个lib文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">       compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])//即添加所有在libs文件夹中的jar</div><div class="line">       //compile files(&apos;libs/WuXiaolong.jar&apos;)//不需要这样一个个去写了</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="so包"><a href="#so包" class="headerlink" title="so包"></a>so包</h3><p>用c或者c++写的library会被叫做so包，Android插件默认情况下支持native包，你需要把.so文件放在对应的文件夹中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app</div><div class="line">   ├── AndroidManifest.xml</div><div class="line">   └── jniLibs</div><div class="line">       ├── armeabi</div><div class="line">       │   └── WuXiaolong.so</div><div class="line">       ├── armeabi-v7a</div><div class="line">       │   └── WuXiaolong.so</div><div class="line">       ├── mips</div><div class="line">       │   └── WuXiaolong.so</div><div class="line">       └── x86</div><div class="line">           └── WuXiaolong.so</div></pre></td></tr></table></figure></p>
<h3 id="aar文件"><a href="#aar文件" class="headerlink" title="aar文件"></a>aar文件</h3><p>library库输出文件是.aar文件，包含了Android 资源文件，在library工程build/output/aar/下</p>
<p>直接依赖library库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">       compile project(&apos;:library名字&apos;)</div><div class="line">       compile project(&apos;:libraries:library名字&apos;)//多个library，libraries是文件夹名字</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>依赖.aar文件<br>创建一个aars文件夹，然后把.aar文件拷贝到该文件夹里面，然后添加该文件夹作为依赖库：<br>app/bulid.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    flatDir &#123;</div><div class="line">        dirs &apos;aars&apos; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">       compile(name:&apos;libraryname&apos;, ext:&apos;aar&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：如果你的library依赖了第三方库，须app再次依赖。</p>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">		compile &apos;com.wuxiaolong.pullloadmorerecyclerview:library:1.0.4&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>
<h1 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h1><p><a href="https://github.com/WuXiaolong/Gradle4Android" target="_blank" rel="external">https://github.com/WuXiaolong/Gradle4Android</a></p>
<h1 id="系列博客"><a href="#系列博客" class="headerlink" title="系列博客"></a>系列博客</h1><p><a href="http://wuxiaolong.me/2016/03/31/gradle4android2/">Gradle for Android（二）全局设置、自定义BuildConfig、混淆</a><br><a href="http://wuxiaolong.me/2016/04/01/gradle4android3/">Gradle for Android（三）多渠道打包、配置签名信息</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Gradle是一种基于Groovy的动态DSL，而Groovy语言是一种基于jvm的动态语言。这里只分享实际开发中会用到的场景，您不需要去学习Groovy语言，知道Java的您是很容易阅读Groovy语言的。&lt;br&gt;系列博客涉及的知识点有：Gradle基本配置、依赖管理、全局设置、自定义BuildConfig、混淆、多渠道打包、配置签名信息、单元测试，是不是迫不及待了啊，快来学习学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h1&gt;&lt;p&gt;新建项目，目录结构如下：&lt;br&gt;&lt;img src=&quot;http://7q5c2h.com1.z0.glb.clouddn.com/gradle4android1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://wuxiaolong.me/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://wuxiaolong.me/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Lambda for Android</title>
    <link href="http://wuxiaolong.me/2016/03/28/lambda4android/"/>
    <id>http://wuxiaolong.me/2016/03/28/lambda4android/</id>
    <published>2016-03-28T12:59:20.000Z</published>
    <updated>2016-08-25T11:38:52.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Lambda，是我去年学习RxJava时知道的，它让代码看起来更加简洁，但个人认为代码的可读性差了很多，因此一直没有去深入学习。</p>
</blockquote>
<h1 id="什么是lambda"><a href="#什么是lambda" class="headerlink" title="什么是lambda"></a>什么是lambda</h1><p>lambda是一种匿名表达式，retrolambda使得Android能使用lambda特性，举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">view.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                 Log.d(&quot;wxl&quot;, &quot;retrolambda test&quot;);</div><div class="line">            &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用 lambda<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">view.setOnClickListener(</div><div class="line">v -&gt; Log.d(&quot;wxl&quot;, &quot;retrolambda test&quot;));</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="Android如何使用"><a href="#Android如何使用" class="headerlink" title="Android如何使用"></a>Android如何使用</h1><p>这里是使用<a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">Retrolambda</a>的gradle插件，这样就可以在代码中使用lambda了。</p>
<h2 id="Android-Studio配置Retrolambda"><a href="#Android-Studio配置Retrolambda" class="headerlink" title="Android Studio配置Retrolambda"></a>Android Studio配置Retrolambda</h2><ol>
<li>lambda需要安装JDK8，下载最新版本<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">jdk-8u73</a></li>
<li><p>build.gradle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:1.5.0&apos;</div><div class="line">        classpath &apos;me.tatarka:gradle-retrolambda:3.2.4&apos;//加上这句依赖，这会使用retrolambda来编译Java代码</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>app/build.gradle </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line">apply plugin: &apos;me.tatarka.retrolambda&apos;//加上这句加,入plugin声明</div><div class="line">android &#123;</div><div class="line">	……</div><div class="line">    compileOptions &#123;//使用JAVA8语法解析</div><div class="line">        sourceCompatibility JavaVersion.VERSION_1_8</div><div class="line">        targetCompatibility JavaVersion.VERSION_1_8</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">retrolambda &#123;//指定将源码编译的级别，使用下列代码，会将代码编译到兼容1.6的字节码格式</div><div class="line">    javaVersion JavaVersion.VERSION_1_6</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Android-Studio自动生成lambda"><a href="#Android-Studio自动生成lambda" class="headerlink" title="Android Studio自动生成lambda"></a>Android Studio自动生成lambda</h1><p><img src="http://7q5c2h.com1.z0.glb.clouddn.com/lambda4android1.png" alt=""><br>当配置Retrolambda成功后，Android Studio会有提示，按Alt+Enter键<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/lambda4android2.png" alt=""><br>点击替换，这样就能自动生成，使用lambda了。到这里我就可以洗洗睡了，也很晚了，但为什么可以这样写呢，还是来简单了解lambda语法吧。</p>
<h1 id="lambda语法简介"><a href="#lambda语法简介" class="headerlink" title="lambda语法简介"></a>lambda语法简介</h1><p>基本格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">input -&gt; body</div></pre></td></tr></table></figure></p>
<h2 id="intput种类"><a href="#intput种类" class="headerlink" title="intput种类"></a>intput种类</h2><ul>
<li>无输入 void<br>() -&gt; body<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Log.d(&quot;wxl&quot;, &quot;retrolambda test&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用 lambda<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new Thread(() -&gt; Log.d(&quot;wxl&quot;, &quot;retrolambda test&quot;));</div></pre></td></tr></table></figure></p>
<ul>
<li>一个参数输入<br>x -&gt; body<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">view.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                 Log.d(&quot;wxl&quot;, &quot;retrolambda test&quot;);</div><div class="line">            &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用 lambda<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">view.setOnClickListener(</div><div class="line">v -&gt; Log.d(&quot;wxl&quot;, &quot;retrolambda test&quot;));</div></pre></td></tr></table></figure></p>
<ul>
<li>多个参数输入<br>(x, y) -&gt; x + y;<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;peter&quot;, &quot;anna&quot;, &quot;mike&quot;, &quot;xenia&quot;);</div><div class="line">Collections.sort(names, new Comparator&lt;String&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public int compare(String a, String b) &#123;</div><div class="line">                return b.compareTo(a);</div><div class="line">&#125;</div><div class="line">        &#125;);</div><div class="line">for (String name : names) &#123;</div><div class="line">     Log.d(&quot;wxl&quot;, name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用 lambda<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; names = Arrays.asList(&quot;peter&quot;, &quot;anna&quot;, &quot;mike&quot;, &quot;xenia&quot;);</div><div class="line">Collections.sort(names, (a, b) -&gt; b.compareTo(a));</div><div class="line">for (String name : names) &#123;</div><div class="line">     Log.d(&quot;wxl&quot;, name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>不省略型別<br>(int x, int y) -&gt; x + y;</li>
</ul>
<h2 id="body-种类"><a href="#body-种类" class="headerlink" title="body 种类"></a>body 种类</h2><ul>
<li>什麼都不做<br>() -&gt; {}</li>
<li>单行不需要有返回值，单行可省略{}<br>(x, y) -&gt; x + y;</li>
<li>单行需要有返回值<br>(x, y) -&gt; x + y//注意没有分号结尾<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.just(&quot;Hello&quot;, &quot;RxJava&quot;)</div><div class="line">          .map(new Func1&lt;String, String&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    public String call(String s) &#123;</div><div class="line">                        return s.toUpperCase();</div><div class="line">                    &#125;</div><div class="line">          &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用 lambda<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Observable.just(&quot;Hello&quot;, &quot;RxJava&quot;)</div><div class="line">          .map(s -&gt; s.toUpperCase());</div></pre></td></tr></table></figure></p>
<ul>
<li>多行不需要有返回值<br>(x, y) -&gt;{<br>x <em> x;<br>y </em> y;<br>}</li>
<li>多行需要有返回值<br>(x, y) -&gt;{<br>x <em> x;<br>y </em> y;<br>return x + y;<br>}</li>
</ul>
<h1 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h1><p>我的微信公众号：吴小龙同学，不止于技术分享，每天进步一点点，欢迎微信扫一扫关注。<br><img src="http://7q5c2h.com1.z0.glb.clouddn.com/qrcode_wuxiaolong.jpg" alt=""></p>
<h1 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h1><p><a href="http://wuxiaolong.me/about/">点击查看</a></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="http://www.jianshu.com/p/f02b04344365" target="_blank" rel="external">Lambda表达式的意义</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Lambda，是我去年学习RxJava时知道的，它让代码看起来更加简洁，但个人认为代码的可读性差了很多，因此一直没有去深入学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是lambda&quot;&gt;&lt;a href=&quot;#什么是lambda&quot; class=&quot;headerlink&quot; title=&quot;什么是lambda&quot;&gt;&lt;/a&gt;什么是lambda&lt;/h1&gt;&lt;p&gt;lambda是一种匿名表达式，retrolambda使得Android能使用lambda特性，举个例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;view.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            @Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            public void onClick(View v) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                 Log.d(&amp;quot;wxl&amp;quot;, &amp;quot;retrolambda test&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用 lambda&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;view.setOnClickListener(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;v -&amp;gt; Log.d(&amp;quot;wxl&amp;quot;, &amp;quot;retrolambda test&amp;quot;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://wuxiaolong.me/categories/Android/"/>
    
    
      <category term="lambda" scheme="http://wuxiaolong.me/tags/lambda/"/>
    
      <category term="retrolambda" scheme="http://wuxiaolong.me/tags/retrolambda/"/>
    
  </entry>
  
</feed>
